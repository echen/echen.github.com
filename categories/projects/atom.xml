<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: projects | Edwin Chen's Blog]]></title>
  <link href="http://blog.echen.me/categories/projects/atom.xml" rel="self"/>
  <link href="http://blog.echen.me/"/>
  <updated>2012-04-06T18:43:48-07:00</updated>
  <id>http://blog.echen.me/</id>
  <author>
    <name><![CDATA[Edwin Chen]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Visualizing Miss USA 2011: Should Evolution be Taught in Schools?]]></title>
    <link href="http://blog.echen.me/2011/07/09/visualizing-miss-usa-2011-should-evolution-be-taught-in-schools/"/>
    <updated>2011-07-09T13:02:05-07:00</updated>
    <id>http://blog.echen.me/2011/07/09/visualizing-miss-usa-2011-should-evolution-be-taught-in-schools</id>
    <content type="html"><![CDATA[<p><strong>tl;dr</strong> Should evolution be taught in schools? Go <a href="http://miss-usa-evolution.heroku.com">here</a> to visualize what the Miss USA contestants think.</p>

<h1>The Visualization</h1>

<p>Education is an area sorely in need of data crunching, so when I ran across <a href="http://www.youtube.com/watch?v=9QBv2CFTSWU&amp;feature=player_embedded#at=56">an amusing video</a> satirizing the Miss USA contestants' thoughts on teaching evolution, I thought it would be fun to transcribe <a href="youtube=http://www.youtube.com/watch?v=UkBmhM0R2A0&amp;feature=youtu.be#at=41">the original video</a> and visualize the data.</p>

<p>So after some tedious transcription, I built <a href="http://miss-usa-evolution.heroku.com">this app</a> to categorize and visualize the responses in various ways. (Mouseover states to see transcriptions, and click to jump to each contestant's response in the video.)</p>

<h1>Example Maps</h1>

<p>Here are some examples of the generated maps.</p>

<p>First, we can look at which contestants believe in evolution (Miss California -- the winner! -- is the only contestant who explicitly states she believes in evolution; the red states explicitly state they do not believe in evolution; the grey states don't make clear what they believe):</p>

<p><a href="http://miss-usa-evolution.heroku.com/?column=believes"><img src="http://dl.dropbox.com/u/10506/blog/miss-usa-evolution/believe-evolution.png" alt="Believe Evolution" /></a></p>

<p>We can also see which contestants believe evolution should be taught in schools (green states say yes, red states say no, grey states say maybe or that it should be a choice):</p>

<p><a href="http://miss-usa-evolution.heroku.com/?column=should_teach"><img src="http://dl.dropbox.com/u/10506/blog/miss-usa-evolution/teach-evolution.png" alt="Teach Evolution" /></a></p>

<p>Here is a rough Darwin-friendliness score I assigned to each response (worst in dark red to best in dark green):</p>

<p><a href="http://miss-usa-evolution.heroku.com/?column=score"><img src="http://dl.dropbox.com/u/10506/blog/miss-usa-evolution/score.png" alt="Score" /></a></p>

<p>This map shows which contestants believe schools should teach creationism:</p>

<p><a href="http://miss-usa-evolution.heroku.com/?column=teach_creationism"><img src="http://dl.dropbox.com/u/10506/blog/miss-usa-evolution/teach-creationism.png" alt="Teach Creationism" /></a></p>

<p>And this map shows which contestants mention science in their response:</p>

<p><a href="http://miss-usa-evolution.heroku.com/?column=mentions_science"><img src="http://dl.dropbox.com/u/10506/blog/miss-usa-evolution/mention-science.png" alt="Mention Science" /></a></p>

<p>So while there aren't any striking patterns (I was hoping for a bright swath of red across the most religious states), the data's still fun to look at, and it's helpful to see that Alabama, whose <a href="http://www.youtube.com/watch?v=UkBmhM0R2A0&amp;feature=youtu.be#at=42">strongly anti-evolution</a> candidate is the only one colored red in both of the first two maps, does seem to be a bit of an outlier with respect to the rest of the nation.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Topic Modeling the Sarah Palin Emails]]></title>
    <link href="http://blog.echen.me/2011/06/27/topic-modeling-the-sarah-palin-emails/"/>
    <updated>2011-06-27T17:19:42-07:00</updated>
    <id>http://blog.echen.me/2011/06/27/topic-modeling-the-sarah-palin-emails</id>
    <content type="html"><![CDATA[<h1>LDA-based Email Browser</h1>

<p>Earlier this month, several thousand emails from Sarah Palin's time as governor of Alaska were <a href="http://sunlightlabs.com/blog/2011/sarahs-inbox/">released</a>. The emails weren't organized in any fashion, though, so to make them easier to browse, I've been working on some topic modeling (in particular, using latent Dirichlet allocation) to separate the documents into different groups.</p>

<p>I threw up <a href="http://sarah-palin.heroku.com/">a simple demo app</a> to view the organized documents <a href="http://sarah-palin.heroku.com/">here</a>.</p>

<h1>What is Latent Dirichlet Allocation?</h1>

<p>Briefly, given a set of documents, LDA tries to learn the latent topics underlying the set. It represents each document as a mixture of topics (generated from a Dirichlet distribution), each of which emits words with a certain probability.</p>

<p>For example, given the sentence "I listened to Justin Bieber and Lady Gaga on the radio while driving around in my car", an LDA model might represent this sentence as 75% about music (a topic which, say, emits the words <em>Bieber</em> with 10% probability, <em>Gaga</em> with 5% probability, <em>radio</em> with 1% probability, and so on) and 25% about cars (which might emit <em>driving</em> with 15% probability and <em>cars</em> with 10% probability).</p>

<p>If you're familiar with latent semantic analysis, you can think of LDA as a generative version. (For a more in-depth explanation, I wrote an introduction to LDA <a href="http://blog.echen.me/2011/08/22/introduction-to-latent-dirichlet-allocation/">here</a>.)</p>

<h1>Sarah Palin Email Topics</h1>

<p>Here's a sample of the topics learnt by the model, as well as the top words for each topic. (Names, of course, are based on my own interpretation.)</p>

<ul>
<li><a href="http://sarah-palin.heroku.com/topics/24"><strong>Wildlife/BP Corrosion</strong></a>: game, fish, moose, wildlife, hunting, bears, polar, bear, subsistence, management, area, board, hunt, wolves, control, department, year, use, wolf, habitat, hunters, caribou, program, denby, fishing, …</li>
<li><a href="http://sarah-palin.heroku.com/topics/0"><strong>Energy/Fuel/Oil/Mining</strong></a>: energy, fuel, costs, oil, alaskans, prices, cost, nome, now, high, being, home, public, power, mine, crisis, price, resource, need, community, fairbanks, rebate, use, mining, villages, …</li>
<li><a href="http://sarah-palin.heroku.com/topics/19"><strong>Trig/Family/Inspiration</strong></a>: family, web, mail, god, son, from, congratulations, children, life, child, down, trig, baby, birth, love, you, syndrome, very, special, bless, old, husband, years, thank, best, …</li>
<li><a href="http://sarah-palin.heroku.com/topics/6"><strong>Gas</strong></a>: gas, oil, pipeline, agia, project, natural, north, producers, companies, tax, company, energy, development, slope, production, resources, line, gasline, transcanada, said, billion, plan, administration, million, industry, …</li>
<li><a href="http://sarah-palin.heroku.com/topics/12"><strong>Education/Waste</strong></a>: school, waste, education, students, schools, million, read, email, market, policy, student, year, high, news, states, program, first, report, business, management, bulletin, information, reports, 2008, quarter, …</li>
<li><a href="http://sarah-palin.heroku.com/topics/15"><strong>Presidential Campaign/Elections</strong></a>: mail, web, from, thank, you, box, mccain, sarah, very, good, great, john, hope, president, sincerely, wasilla, work, keep, make, add, family, republican, support, doing, p.o, …</li>
</ul>


<p>Here's a sample email from the wildlife topic:</p>

<p><a href="http://sarah-palin.heroku.com/emails/6719"><img src="http://dl.dropbox.com/u/10506/blog/palin-browser/wildlife-email.png" alt="Wildlife Email" /></a></p>

<p>I also thought the classification for <a href="http://sarah-palin.heroku.com/emails/12900">this email</a> was really neat: the LDA model labeled it as 10% in the <a href="http://sarah-palin.heroku.com/topics/15">Presidential Campaign/Elections</a> topic and 90% in the <a href="http://sarah-palin.heroku.com/topics/24">Wildlife</a> topic, and it's precisely a wildlife-based protest against Palin as a choice for VP:</p>

<p><a href="http://sarah-palin.heroku.com/emails/12900"><img src="http://dl.dropbox.com/u/10506/blog/palin-browser/wildlife-vp.png" alt="Wildlife-VP Protest" /></a></p>

<h1>Future Analysis</h1>

<p>In a future post, I'll perhaps see if we can glean any interesting patterns from the email topics. For example, for a quick graph now, if we look at the percentage of emails in the <a href="http://sarah-palin.heroku.com/topics/19">Trig/Family/Inspiration topic</a> across time, we see that there's a spike in April 2008 -- exactly (and unsurprisingly) the month in which Trig was born.</p>

<p><a href="http://dl.dropbox.com/u/10506/blog/palin-browser/trig-topic.png"><img src="http://dl.dropbox.com/u/10506/blog/palin-browser/trig-topic.png" alt="Trig" /></a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Spork: Spoon or Fork?]]></title>
    <link href="http://blog.echen.me/2011/06/14/spork-spoon-or-fork/"/>
    <updated>2011-06-14T23:32:04-07:00</updated>
    <id>http://blog.echen.me/2011/06/14/spork-spoon-or-fork</id>
    <content type="html"><![CDATA[<p>There's <a href="http://www.youtube.com/watch?v=ruJ76-o5lxU">an adorable scene</a> in <em>WALL-E</em> where, unable to decide whether a spork belongs with his spoon collection or fork collection, WALL-E enters an infinite loop and spontaneously combusts*.</p>

<p><a href="http://dl.dropbox.com/u/10506/blog/spork/spork-indecision-2.gif"><img src="http://dl.dropbox.com/u/10506/blog/spork/spork-indecision-2.gif" alt="Spork" /></a></p>

<p>This led me to the following timeless question: is a spork more spoon or fork?</p>

<p>To answer, I did a little digging. First, I pulled images of spoons and forks from <a href="http://www.bing.com/images">Bing</a> (natch) and used these to train a spoon-vs.-fork SVM (using the excellent <a href="http://scikit-learn.sourceforge.net/">scikit-learn</a> package).</p>

<p>Using leave-one-out cross-validation, the classifier showed roughly 85% accuracy: 4 out of 20 spoons were misclassified as forks, and 2 out of 20 forks were misclassified as spoons. Not bad, considering the limited dataset and lack of tuning.</p>

<p>Finally, I applied the classifier to my spork images.</p>

<p>The results? 2 out of 20 sporks were classified as forks and the remaining 18 were classified as spoons, thereby definitively proving that <strong>a spork is 10% fork and 90% spoon</strong>.</p>

<p><a href="http://dl.dropbox.com/u/10506/blog/spork/spork-decomposition.png"><img src="http://dl.dropbox.com/u/10506/blog/spork/spork-decomposition.png" alt="Spork Decomposition" /></a></p>

<p>*Not really.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TWSS: Building a That's What She Said Classifier]]></title>
    <link href="http://blog.echen.me/2011/05/05/twss-building-a-thats-what-she-said-classifier/"/>
    <updated>2011-05-05T00:09:17-07:00</updated>
    <id>http://blog.echen.me/2011/05/05/twss-building-a-thats-what-she-said-classifier</id>
    <content type="html"><![CDATA[<p>There's been a <a href="www.cs.washington.edu/homes/brun/pubs/pubs/Kiddon11.pdf">fun paper</a> on <a href="http://www.urbandictionary.com/define.php?term=that's%20what%20she%20said">That's What She Said</a> identification making the rounds recently, so I spent some time over the weekend building my own classifier.</p>

<p><strong>tl;dr</strong> A simple unigram Naive Bayes model works pretty well, with performance on the lines of 0.969 precision and 0.823 recall. There's a demo <a href="http://twss-classifier.heroku.com/">here</a>. I also ran the classifier over some fairy tale text.</p>

<h1>Naive Bayes Classifier</h1>

<p>To start, I used a super simple Naive Bayes classifier, trained on unigrams (with add-one smoothing). (See the appendix at the end for details.)</p>

<h2>Unigram vs. Bigram Model</h2>

<p>Here are the most predictive features, after training a Naive Bayes model with unigrams:</p>

<pre><code>unigram         p(twss|unigram)
pull            0.9724889822144924
bigger          0.9614677503890157
wet             0.959004244327654
hard            0.9527628206878138
stick           0.9505783678914388
hole            0.9443870318715991
oh              0.9432941279908561
replied         0.943294127990856
fast            0.943294127990856
longer          0.9397415371025485
</code></pre>

<p>Just to compare, here are some of the most predictive features in a bigram model (I added START and END tokens to the beginning and end of each sentence, in order to have some contextual features):</p>

<pre><code>bigram          p(twss|bigram)
it in           0.9801434151851175
START wow       0.9705079286853889
START oh        0.9473580156961879
its too         0.9350522640444204
pull out        0.9187779331523677
too big         0.9187779331523677
START man       0.9113755525471394
hard END        0.9113755525471394
put it          0.9071442285463515
that thing      0.9024886021363793
stick it        0.9024886021363793
my god          0.9024886021363793
go in           0.8916207044791409
START ugh       0.8916207044791409
make it         0.8916207044791409
its so          0.8916207044791409
</code></pre>

<p>Amusingly, sentences starting with <em>wow</em>, <em>oh</em>, and <em>ugh</em>, tend to be good candidates for TWSS sentences, as well as sentences containing <em>it's too</em> and <em>it's so</em>.</p>

<p>Here's a precision-recall curve comparing the two models. We see that, on our datasets, a unigram classifier handily beats a bigram classifier:</p>

<p><a href="http://dl.dropbox.com/u/10506/blog/twss/precision-recall.png"><img src="http://dl.dropbox.com/u/10506/blog/twss/precision-recall.png" alt="Precision-Recall" /></a></p>

<h1>Darling it's better</h1>

<p>Although our classifier gives excellent performance on our test set, one question is how well it generalizes to other sources of data.</p>

<p>I didn't have another set of positive examples to draw from, but I took a set of fairy tales on Project Gutenberg to form a new batch of negative examples. On this new set of fairy tale sentences, the classifier misclassified only 81 out of 912 of the examples (assuming they should all be classified as "not TWSS"), which is a pretty low error rate of 8.89%.</p>

<p>What do these misclassifications look like? Here are some of the false positives it made:</p>

<h2>Aladdin</h2>

<ul>
<li>"The African magician carries it carefully wrapt up in his bosom," said the princess; "and this I can assure you, because he pulled it out before me, and showed it to me in triumph."</li>
<li>It is vanished; but I had no concern in its removal.</li>
<li>"My son," said he, "what a man you are to do such surprising things always in the twinkling of an eye!"</li>
<li>"Sire," replied Aladdin, "I have not the least reason to complain of your conduct, since you did nothing but what your duty required."</li>
<li>"With your leave, mother," replied Aladdin, "I shall now take care how I sell a lamp which may be so serviceable both to you and me."</li>
</ul>


<p><a href="http://dl.dropbox.com/u/10506/blog/twss/aladdin.png"><img src="http://dl.dropbox.com/u/10506/blog/twss/aladdin.png" alt="http://dl.dropbox.com/u/10506/blog/twss/aladdin.png" /></a></p>

<h2>Hansel and Gretel</h2>

<ul>
<li>"Oh dear," he said, "do let me go and see the hunt; I cannot restrain myself."</li>
<li>When they awoke it was dark night, and poor Grethel began to cry, and said, "Oh, how shall we get out of the wood?" But Hansel comforted her.</li>
<li>"But remember," she said, "I must lock the cottage door against those huntsmen, so when you come back in the evening, and knock, I shall not admit you, unless you say, 'Dear little sister let me in.'</li>
</ul>


<h2>Snow White</h2>

<ul>
<li>One was too long, another too short; so she tried them all till she came to the seventh, and that was so comfortable that she laid herself down, and was soon fast asleep.</li>
<li>"Oh yes, I will try," said Snow-white.</li>
</ul>


<p>Note that a lot of these really are TWSS sentences! (Now we know where <a href="http://www.snopes.com/disney/films/mermaid.asp">those Disney artists</a> got their inspiration.) So the classifier appears to generalize surprisingly well.</p>

<h1>A Demo</h1>

<p>I created <a href="http://twss-classifier.heroku.com/">a small Sinatra app</a> to play around with the classifier, and deployed it <a href="http://twss-classifier.heroku.com/">here</a>. I also put the code <a href="https://github.com/echen/twss-classifier">on Github</a>.</p>

<h1>Appendix: Details</h1>

<h2>Datasets</h2>

<p>To grab some TWSS examples, my first thought was to turn to <a href="http://search.twitter.com/search?q=twss">twitter</a>. However, the twitter data turned out to be incredibly noisy (lots of junk obscuring not terribly funny examples), so taking a cue from the K&amp;B paper, I pulled data from three sources:</p>

<ul>
<li>First, I scraped <a href="http://twssstories.com">twss stories</a> for positive training data (sentences for which a TWSS response is appropriate). Since only the last part in quotes from each submission is truly relevant to being a TWSS, I kept the quote and threw away the rest of each submission.</li>
<li>Next, I scraped <a href="http://textsfromlastnight.com">Texts from Last Night</a> and <a href="http://www.fmylife.com">FMyLife</a> for negative training data. Since TWSS jokes are usually made in response to <em>sentences</em> (the last sentence you say), I split each submission into sentences, and each sentence formed a single negative training example.</li>
</ul>


<p>Finally, I normalized each sentence by converting to lowercase and removing any punctuation.</p>

<h2>The Algorithm</h2>

<p>To train and test the classifier, I used the examples I gathered to form training and test sets, each consisting of:</p>

<ul>
<li>1000 positive examples from twss stories.</li>
<li>500 negative examples from Texts from Last Night.</li>
<li>500 negative examples from FMyLife.</li>
</ul>


<h2>Performance of the Unigram Model</h2>

<p>Since we want to optimize for precision (we hope the things we classify as TWSS sentences really are TWSS sentences) over recall (it's fine if we don't always respond TWSS to every TWSS sentence), let's use 0.99 probability as our threshold for classifying a sentence as TWSS. (This is equivalent to setting a low prior for the probability of being a TWSS.)</p>

<p>With this threshold, a unigram Naive Bayes classifier has the following performance on a test set:</p>

<ul>
<li>True positives: 823</li>
<li>False negatives: 177</li>
<li>True negatives: 974</li>
<li>False positives: 26</li>
<li>Precision = 0.969</li>
<li>Recall = 0.823</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Filtering for English Tweets: Unsupervised Language Detection on Twitter]]></title>
    <link href="http://blog.echen.me/2011/05/01/unsupervised-language-detection-algorithms/"/>
    <updated>2011-05-01T16:28:07-07:00</updated>
    <id>http://blog.echen.me/2011/05/01/unsupervised-language-detection-algorithms</id>
    <content type="html"><![CDATA[<p>(See a demo <a href="http://babel-fett.heroku.com/">here</a>.)</p>

<p>While working on a Twitter sentiment analysis project, I ran into the problem of needing to filter out all non-English tweets. (Asking the Twitter API for English-only tweets doesn't seem to work, as it nonetheless returns tweets in Spanish, Portuguese, Dutch, Russian, and a couple other languages.)</p>

<p>Since I didn't have any labeled data, I thought it would be fun to build an <strong>unsupervised</strong> language classifier. In particular, using an EM algorithm to build a naive Bayes model of English vs. non-English n-gram probabilities turned out to work quite well, so here's a description.</p>

<h1>EM Algorithm</h1>

<p>Let's recall the naive Bayes algorithm: given a tweet (a set of <em>character</em> n-grams), we estimate its language to be the language $L$ that maximizes</p>

<p>$$P(language = L | ngrams) \propto P(ngrams | language = L) P(language = L)$$</p>

<p>Thus, we need to estimate $P(ngram | language = L)$ and $P(language = L)$.</p>

<p>This would be easy <strong>if we knew the language of each tweet</strong>, since we could estimate</p>

<ul>
<li>$P(xyz| language = English)$ as #(number of times "xyz" is a trigram in the English tweets) / #(total trigrams in the English tweets)</li>
<li>$P(language = English)$ as the proportion of English tweets.</li>
</ul>


<p>Or, it would also be easy <strong>if we knew the n-gram probabilities for each language</strong>, since we could use Bayes' theorem to compute the language <em>probabilities</em> for each tweet, and then take a weighted variant of the previous paragraph.</p>

<p><strong>The problem is that we know neither of these.</strong> So what the EM algorithm says is that that we can simply <strong>guess</strong>:</p>

<ul>
<li>Pretend we know the language of each tweet (by randomly assigning them at the beginning).</li>
<li>Using this guess, we can compute the n-gram probabilities for each language.</li>
<li>Using the n-gram probabilities for each language, we can recompute the language probabilities of each tweet.</li>
<li>Using these recomputed language probabilities, we can recompute the n-gram probabilities.</li>
<li>And so on, recomputing the language probabilities and n-gram probabilities over and over. While our guesses will be off in the beginning, the probabilities will eventually converge to (locally) minimize the likelihood. (In my tests, my language detector would sometimes correctly converge to an English detector, and sometimes it would converge to an English-and-Dutch detector.)</li>
</ul>


<h2>EM Analogy for the Layman</h2>

<p>Why does this work? Suppose you suddenly move to New York, and you want a way to differentiate between tourists and New Yorkers based on their activities. Initially, you don't know who's a tourist and who's a New Yorker, and you don't know which are touristy activities and which are not. So you randomly place people into two groups A and B. (You randomly assign all tweets to a language)</p>

<p>Now, given all the people in group A, you notice that a large number of them visit the Statue of Liberty; similarly, you notice that a large number of people in group B walk really quickly. (You notice that one set of words often has the n-gram "ing", and that another set of words often has the n-gram "ias"; that is, you fix the language probabilities for each tweet, and recompute the n-gram probabilities for each language.)</p>

<p>So you start to put people visiting the Statue of Liberty in group A, and you start to put fast walkers in group B. (You fix the n-gram probabilities for each language, and recompute the language probabilities for each tweet.)</p>

<p>With your new A and B groups, you notice more differentiating factors: group A people tend to carry along cameras, and group B people tend to be more finance-savvy.</p>

<p>So you start to put camera-carrying folks in group A, and finance-savvy folks in group B.</p>

<p>And so on. Eventually, you settle on two groups of people and differentiating activities: people who walk slowly and visit the Statue of Liberty, and busy-looking people who walk fast and don't visit. Assuming there are more native New Yorkers than tourists, you can then guess that the natives are the larger group.</p>

<h1>Results</h1>

<p>I wrote some Ruby code to implement the above algorithm, and trained it on half a million tweets, using English and "not English" as my two languages. The results looked surprisingly good from just eyeballing:</p>

<p><a href="https://img.skitch.com/20110303-qfrnb8gstgheh4xech4iutfskd.jpg"><img src="https://img.skitch.com/20110303-qfrnb8gstgheh4xech4iutfskd.jpg" alt="Example Results" /></a></p>

<p>But in order to get some hard metrics and to tune parameters (e.g., n-gram size), I needed a labeled dataset. So I pulled a set of English-language and Spanish-language documents from Project Gutenberg, and split them to form training and test sets (the training set consisted of 2000 lines of English and 1000 lines of Spanish, and  1000 lines of English and 1000 lines of Spanish for the test set).</p>

<p>Trained on bigrams, the detector resulted in:</p>

<ul>
<li>991 true positives (English lines correctly classified as English)</li>
<li>9 false negatives (English lines incorrectly classified as Spanish</li>
<li>11 false positives (Spanish lines incorrectly classified as English)</li>
<li>989 true negatives (Spanish lines correctly classified as English)</li>
</ul>


<p>for a precision of 0.989 and a recall of 0.991.</p>

<p>Trained on trigrams, the detector resulted in:</p>

<ul>
<li>992 true positives</li>
<li>8 false negatives</li>
<li>10 false positives</li>
<li>990 true negatives</li>
</ul>


<p>for a precision of 0.990 and a recall of 0.992.</p>

<p>Also, when I looked at the sentences the detector was making errors on, I saw that they almost always consisted of only one or two words (e.g., the incorrectly classified sentences were lines like "inmortal", "autumn", and "salir"). So the detector pretty much never made a mistake on a normal sentence!</p>

<h1>Code/Demo</h1>

<p>I put the code on <a href="https://github.com/echen/unsupervised-language-identification">my Github account</a>, and a quick <a href="http://babel-fett.heroku.com/">demo app</a>, trained on trigrams from tweets with lang="en" according to the Twitter API, is <a href="http://babel-fett.heroku.com/">here</a>.</p>
]]></content>
  </entry>
  
</feed>
