<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Edwin Chen's Blog]]></title>
  <link href="http://echen.github.com/atom.xml" rel="self"/>
  <link href="http://echen.github.com/"/>
  <updated>2012-02-05T01:08:32-08:00</updated>
  <id>http://echen.github.com/</id>
  <author>
    <name><![CDATA[Edwin Chen]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Quick Introduction to ggplot2]]></title>
    <link href="http://echen.github.com/blog/2012/01/17/quick-introduction-to-ggplot2/"/>
    <updated>2012-01-17T10:28:55-08:00</updated>
    <id>http://echen.github.com/blog/2012/01/17/quick-introduction-to-ggplot2</id>
    <content type="html"><![CDATA[<p>For a better-looking version of this post, see my <a href="https://github.com/echen/ggplot2-tutorial">Github repository</a>, which also contains some of the <a href="https://github.com/echen/ggplot2-tutorial/tree/master/data">example datasets</a> I use and a <a href="https://github.com/echen/ggplot2-tutorial/blob/master/ggplot2-tutorial.R">literate programming version</a> of this tutorial.</p>

<h1>Introduction</h1>

<p>This is a bare-bones introduction to <a href="http://had.co.nz/ggplot2/">ggplot2</a>, a visualization package in R. It assumes no knowledge of R.</p>

<p>There is also a literate programming version of this tutorial in <a href="https://github.com/echen/ggplot2-tutorial/blob/master/ggplot2-tutorial.R"><code>ggplot2-tutorial.R</code></a>.</p>

<h1>Preview</h1>

<p>Let&#8217;s start with a preview of what ggplot2 can do.</p>

<p>Given Fisher&#8217;s <a href="http://en.wikipedia.org/wiki/Iris_flower_data_set">iris</a> data set and one simple command&#8230;</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='r'><span class='line'>qplot<span class="p">(</span>Sepal.Length<span class="p">,</span> Petal.Length<span class="p">,</span> data <span class="o">=</span> iris<span class="p">,</span> color <span class="o">=</span> Species<span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>&#8230;we can produce this plot of sepal length vs. petal length, colored by species.</p>

<p><a href="http://dl.dropbox.com/u/10506/blog/r/ggplot2/sepal-vs-petal-specied.png"><img src="http://dl.dropbox.com/u/10506/blog/r/ggplot2/sepal-vs-petal-specied.png" alt="Sepal vs. Petal, Colored by Species" /></a></p>

<h1>Installation</h1>

<p>You can download R <a href="http://cran.opensourceresources.org/">here</a>. After installation, you can launch R in interactive mode by either typing <code>R</code> on the command line or opening the standard GUI (which should have been included in the download).</p>

<h1>R Basics</h1>

<h2>Vectors</h2>

<p>Vectors are a core data structure in R, and are created with <code>c()</code>. Elements in a vector must be of the same type.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='r'><span class='line'>numbers <span class="o">=</span> c<span class="p">(</span><span class="m">23</span><span class="p">,</span> <span class="m">13</span><span class="p">,</span> <span class="m">5</span><span class="p">,</span> <span class="m">7</span><span class="p">,</span> <span class="m">31</span><span class="p">)</span>
</span><span class='line'>names <span class="o">=</span> c<span class="p">(</span><span class="s">&quot;edwin&quot;</span><span class="p">,</span> <span class="s">&quot;alice&quot;</span><span class="p">,</span> <span class="s">&quot;bob&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Elements are indexed starting at 1, and are accessed with <code>[]</code> notation.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='r'><span class='line'>numbers<span class="p">[</span><span class="m">1</span><span class="p">]</span> <span class="c1"># 23</span>
</span><span class='line'>names<span class="p">[</span><span class="m">1</span><span class="p">]</span> <span class="c1"># edwin</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Data frames</h2>

<p><a href="http://www.r-tutor.com/r-introduction/data-frame">Data frames</a> are like matrices, but with named columns of different types (similar to <a href="http://code.google.com/p/sqldf/">database tables</a>).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='r'><span class='line'>books <span class="o">=</span> data.frame<span class="p">(</span>
</span><span class='line'>  title <span class="o">=</span> c<span class="p">(</span><span class="s">&quot;harry potter&quot;</span><span class="p">,</span> <span class="s">&quot;war and peace&quot;</span><span class="p">,</span> <span class="s">&quot;lord of the rings&quot;</span><span class="p">),</span> <span class="c1"># column named &quot;title&quot;</span>
</span><span class='line'>  author <span class="o">=</span> c<span class="p">(</span><span class="s">&quot;rowling&quot;</span><span class="p">,</span> <span class="s">&quot;tolstoy&quot;</span><span class="p">,</span> <span class="s">&quot;tolkien&quot;</span><span class="p">),</span>
</span><span class='line'>  num_pages <span class="o">=</span> c<span class="p">(</span><span class="s">&quot;350&quot;</span><span class="p">,</span> <span class="s">&quot;875&quot;</span><span class="p">,</span> <span class="s">&quot;500&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can access columns of a data frame with <code>$</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='r'><span class='line'>books<span class="p">$</span>title <span class="c1"># c(&quot;harry potter&quot;, &quot;war and peace&quot;, &quot;lord of the rings&quot;)</span>
</span><span class='line'>books<span class="p">$</span>author<span class="p">[</span><span class="m">1</span><span class="p">]</span> <span class="c1"># &quot;rowling&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can also create new columns with <code>$</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='r'><span class='line'>books<span class="p">$</span>num_bought_today <span class="o">=</span> c<span class="p">(</span><span class="m">10</span><span class="p">,</span> <span class="m">5</span><span class="p">,</span> <span class="m">8</span><span class="p">)</span>
</span><span class='line'>books<span class="p">$</span>num_bought_yesterday <span class="o">=</span> c<span class="p">(</span><span class="m">18</span><span class="p">,</span> <span class="m">13</span><span class="p">,</span> <span class="m">20</span><span class="p">)</span>
</span><span class='line'>  
</span><span class='line'>books<span class="p">$</span>total\_num\_bought <span class="o">=</span> books<span class="p">$</span>num_bought_today <span class="o">+</span> books<span class="p">$</span>num_bought_yesterday
</span></code></pre></td></tr></table></div></figure>


<h2>read.table</h2>

<p>Suppose you want to import a TSV file into R as a data frame.</p>

<h3>tsv file without header</h3>

<p>For example, consider the <a href="https://github.com/echen/r-tutorial/blob/master/data/students.tsv"><code>data/students.tsv</code></a> file (with columns describing each student&#8217;s age, test score, and name).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='r'><span class='line'><span class="m">13</span>   <span class="m">100</span> alice
</span><span class='line'><span class="m">14</span>   <span class="m">95</span>  bob
</span><span class='line'><span class="m">13</span>   <span class="m">82</span>  eve
</span></code></pre></td></tr></table></div></figure>


<p>We can import this file into R using <a href="http://stat.ethz.ch/R-manual/R-devel/library/utils/html/read.table.html"><code>read.table()</code></a>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='r'><span class='line'>students <span class="o">=</span> read.table<span class="p">(</span><span class="s">&quot;data/students.tsv&quot;</span><span class="p">,</span>
</span><span class='line'>  header <span class="o">=</span> <span class="k-Variable">F</span><span class="p">,</span> <span class="c1"># file does not contain a header (`F` is short for `FALSE`), so we must manually specify column names                    </span>
</span><span class='line'>  sep <span class="o">=</span> <span class="s">&quot;\t&quot;</span><span class="p">,</span> <span class="c1"># file is tab-delimited        </span>
</span><span class='line'>  col.names <span class="o">=</span> c<span class="p">(</span><span class="s">&quot;age&quot;</span><span class="p">,</span> <span class="s">&quot;score&quot;</span><span class="p">,</span> <span class="s">&quot;name&quot;</span><span class="p">)</span> <span class="c1"># column names</span>
</span><span class='line'><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>We can now access the different columns in the data frame with <code>students$age</code>, <code>students$score</code>, and <code>students$name</code>.</p>

<h3>csv file with header</h3>

<p>For an example of a file in a different format, look at the <a href="https://github.com/echen/r-tutorial/blob/master/data/studentsWithHeader.tsv"><code>data/studentsWithHeader.tsv</code></a> file.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='r'><span class='line'>age<span class="p">,</span>score<span class="p">,</span>name
</span><span class='line'><span class="m">13</span><span class="p">,</span><span class="m">100</span><span class="p">,</span>alice
</span><span class='line'><span class="m">14</span><span class="p">,</span><span class="m">95</span><span class="p">,</span>bob
</span><span class='line'><span class="m">13</span><span class="p">,</span><span class="m">82</span><span class="p">,</span>eve
</span></code></pre></td></tr></table></div></figure>


<p>Here we have the same data, but now the file is comma-delimited and contains a header. We can import this file with</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='r'><span class='line'>students <span class="o">=</span> read.table<span class="p">(</span><span class="s">&quot;data/students.tsv&quot;</span><span class="p">,</span>
</span><span class='line'>  sep <span class="o">=</span> <span class="s">&quot;,&quot;</span><span class="p">,</span>
</span><span class='line'>  header <span class="o">=</span> <span class="k-Variable">T</span>  <span class="c1"># first line contains column names, so we can immediately call `students$age`        </span>
</span><span class='line'><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>(Note: there is also a <code>read.csv</code> function that uses <code>sep = ","</code> by default.)</p>

<h2>help</h2>

<p>There are many more options that <code>read.table</code> can take. For a list of these, just type <code>help(read.table)</code> (or <code>?read.table</code>) at the prompt to access documentation.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='r'><span class='line'><span class="c1"># These work for other functions as well.</span>
</span><span class='line'>help<span class="p">(</span>read.table<span class="p">)</span>
</span><span class='line'>?read.table
</span></code></pre></td></tr></table></div></figure>


<h1>ggplot2</h1>

<p>With these R basics in place, let&#8217;s dive into the ggplot2 package.</p>

<h2>Installation</h2>

<p>One of R&#8217;s greatest strengths is its excellent set of <a href="http://cran.r-project.org/web/packages/available_packages_by_name.html">packages</a>. To install a package, you can use the <code>install.packages()</code> function.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='r'><span class='line'>install.packages<span class="p">(</span><span class="s">&quot;ggplot2&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>To load a package into your current R session, use <code>library()</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='r'><span class='line'>library<span class="p">(</span>ggplot2<span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Scatterplots with qplot()</h2>

<p>Let&#8217;s look at how to create a scatterplot in ggplot2. We&#8217;ll use the <code>iris</code> data frame that&#8217;s automatically loaded into R.</p>

<p>What does the data frame contain? We can use the <code>head</code> function to look at the first few rows.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='r'><span class='line'>head<span class="p">(</span>iris<span class="p">)</span> <span class="c1"># by default, head displays the first 6 rows. see `?head`</span>
</span><span class='line'>head<span class="p">(</span>iris<span class="p">,</span> n <span class="o">=</span> <span class="m">10</span><span class="p">)</span> <span class="c1"># we can also explicitly set the number of rows to display</span>
</span><span class='line'>
</span><span class='line'>Sepal.Length Sepal.Width Petal.Length Petal.Width Species
</span><span class='line'>         <span class="m">5.1</span>         <span class="m">3.5</span>          <span class="m">1.4</span>         <span class="m">0.2</span>  setosa
</span><span class='line'>         <span class="m">4.9</span>         <span class="m">3.0</span>          <span class="m">1.4</span>         <span class="m">0.2</span>  setosa
</span><span class='line'>         <span class="m">4.7</span>         <span class="m">3.2</span>          <span class="m">1.3</span>         <span class="m">0.2</span>  setosa
</span><span class='line'>         <span class="m">4.6</span>         <span class="m">3.1</span>          <span class="m">1.5</span>         <span class="m">0.2</span>  setosa
</span><span class='line'>         <span class="m">5.0</span>         <span class="m">3.6</span>          <span class="m">1.4</span>         <span class="m">0.2</span>  setosa
</span><span class='line'>         <span class="m">5.4</span>         <span class="m">3.9</span>          <span class="m">1.7</span>         <span class="m">0.4</span>  setosa
</span></code></pre></td></tr></table></div></figure>


<p>(The data frame actually contains three types of species: setosa, versicolor, and virginica.)</p>

<p>Let&#8217;s plot <code>Sepal.Length</code> against <code>Petal.Length</code> using ggplot2&#8217;s <code>qplot()</code> function.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='r'><span class='line'>qplot<span class="p">(</span>Sepal.Length<span class="p">,</span> Petal.Length<span class="p">,</span> data <span class="o">=</span> iris<span class="p">)</span>
</span><span class='line'><span class="c1"># Plot Sepal.Length vs. Petal.Length, using data from the `iris` data frame.</span>
</span><span class='line'><span class="c1"># * First argument `Sepal.Length` goes on the x-axis.</span>
</span><span class='line'><span class="c1"># * Second argument `Petal.Length` goes on the y-axis.</span>
</span><span class='line'><span class="c1"># * `data = iris` means to look for this data in the `iris` data frame.    </span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p><a href="http://dl.dropbox.com/u/10506/blog/r/ggplot2/sepal-vs-petal.png"><img src="http://dl.dropbox.com/u/10506/blog/r/ggplot2/sepal-vs-petal.png" alt="Sepal Length vs. Petal Length" /></a></p>

<p>To see where each species is located in this graph, we can color each point by adding a <code>color = Species</code> argument.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='r'><span class='line'>qplot<span class="p">(</span>Sepal.Length<span class="p">,</span> Petal.Length<span class="p">,</span> data <span class="o">=</span> iris<span class="p">,</span> color <span class="o">=</span> Species<span class="p">)</span> <span class="c1"># dude!</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="http://dl.dropbox.com/u/10506/blog/r/ggplot2/sepal-vs-petal-specied.png"><img src="http://dl.dropbox.com/u/10506/blog/r/ggplot2/sepal-vs-petal-specied.png" alt="Sepal vs. Petal, Colored by Species" /></a></p>

<p>Similarly, we can let the size of each point denote sepal width, by adding a <code>size = Sepal.Width</code> argument.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='r'><span class='line'>qplot<span class="p">(</span>Sepal.Length<span class="p">,</span> Petal.Length<span class="p">,</span> data <span class="o">=</span> iris<span class="p">,</span> color <span class="o">=</span> Species<span class="p">,</span> size <span class="o">=</span> Petal.Width<span class="p">)</span>
</span><span class='line'><span class="c1"># We see that Iris setosa flowers have the narrowest petals.</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="http://dl.dropbox.com/u/10506/blog/r/ggplot2/sepal-vs-petal-sized.png"><img src="http://dl.dropbox.com/u/10506/blog/r/ggplot2/sepal-vs-petal-sized.png" alt="Sepal vs. Petal, Sized by Petal Width" /></a></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='r'><span class='line'>qplot<span class="p">(</span>Sepal.Length<span class="p">,</span> Petal.Length<span class="p">,</span> data <span class="o">=</span> iris<span class="p">,</span> color <span class="o">=</span> Species<span class="p">,</span> size <span class="o">=</span> Petal.Width<span class="p">,</span> alpha <span class="o">=</span> I<span class="p">(</span><span class="m">0.7</span><span class="p">))</span>
</span><span class='line'><span class="c1"># By setting the alpha of each point to 0.7, we reduce the effects of overplotting.</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="http://dl.dropbox.com/u/10506/blog/r/ggplot2/sepal-vs-petal-alpha.png"><img src="http://dl.dropbox.com/u/10506/blog/r/ggplot2/sepal-vs-petal-alpha.png" alt="Sepal vs. Petal, with Transparency" /></a></p>

<p>Finally, let&#8217;s fix the axis labels and add a title to the plot.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='r'><span class='line'>qplot<span class="p">(</span>Sepal.Length<span class="p">,</span> Petal.Length<span class="p">,</span> data <span class="o">=</span> iris<span class="p">,</span> color <span class="o">=</span> Species<span class="p">,</span>
</span><span class='line'>  xlab <span class="o">=</span> <span class="s">&quot;Sepal Length&quot;</span><span class="p">,</span> ylab <span class="o">=</span> <span class="s">&quot;Petal Length&quot;</span><span class="p">,</span>
</span><span class='line'>  main <span class="o">=</span> <span class="s">&quot;Sepal vs. Petal Length in Fisher&#39;s Iris data&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="http://dl.dropbox.com/u/10506/blog/r/ggplot2/sepal-vs-petal-titled.png"><img src="http://dl.dropbox.com/u/10506/blog/r/ggplot2/sepal-vs-petal-titled.png" alt="Sepal vs. Petal, Titled" /></a></p>

<h2>Other common geoms</h2>

<p>In the scatterplot examples above, we implicitly used a <em>point</em> <strong>geom</strong>, the default when you supply two arguments to <code>qplot()</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='r'><span class='line'><span class="c1"># These two invocations are equivalent.</span>
</span><span class='line'>qplot<span class="p">(</span>Sepal.Length<span class="p">,</span> Petal.Length<span class="p">,</span> data <span class="o">=</span> iris<span class="p">,</span> geom <span class="o">=</span> <span class="s">&quot;point&quot;</span><span class="p">)</span>
</span><span class='line'>qplot<span class="p">(</span>Sepal.Length<span class="p">,</span> Petal.Length<span class="p">,</span> data <span class="o">=</span> iris<span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>But we can also easily use other types of geoms to create more kinds of plots.</p>

<h3>Barcharts: geom = &#8220;bar&#8221;</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='r'><span class='line'>movies <span class="o">=</span> data.frame<span class="p">(</span>
</span><span class='line'>  director <span class="o">=</span> c<span class="p">(</span><span class="s">&quot;spielberg&quot;</span><span class="p">,</span> <span class="s">&quot;spielberg&quot;</span><span class="p">,</span> <span class="s">&quot;spielberg&quot;</span><span class="p">,</span> <span class="s">&quot;jackson&quot;</span><span class="p">,</span> <span class="s">&quot;jackson&quot;</span><span class="p">),</span>
</span><span class='line'>  movie <span class="o">=</span> c<span class="p">(</span><span class="s">&quot;jaws&quot;</span><span class="p">,</span> <span class="s">&quot;avatar&quot;</span><span class="p">,</span> <span class="s">&quot;schindler&#39;s list&quot;</span><span class="p">,</span> <span class="s">&quot;lotr&quot;</span><span class="p">,</span> <span class="s">&quot;king kong&quot;</span><span class="p">),</span>
</span><span class='line'>  minutes <span class="o">=</span> c<span class="p">(</span><span class="m">124</span><span class="p">,</span> <span class="m">163</span><span class="p">,</span> <span class="m">195</span><span class="p">,</span> <span class="m">600</span><span class="p">,</span> <span class="m">187</span><span class="p">)</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Plot the number of movies each director has.</span>
</span><span class='line'>qplot<span class="p">(</span>director<span class="p">,</span> data <span class="o">=</span> movies<span class="p">,</span> geom <span class="o">=</span> <span class="s">&quot;bar&quot;</span><span class="p">,</span> ylab <span class="o">=</span> <span class="s">&quot;# movies&quot;</span><span class="p">)</span>
</span><span class='line'><span class="c1"># By default, the height of each bar is simply a count.</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="http://dl.dropbox.com/u/10506/blog/r/ggplot2/num-movies.png"><img src="http://dl.dropbox.com/u/10506/blog/r/ggplot2/num-movies.png" alt="# Movies" /></a></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='r'><span class='line'><span class="c1"># But we can also supply a different weight.</span>
</span><span class='line'><span class="c1"># Here the height of each bar is the total running time of the director&#39;s movies.</span>
</span><span class='line'>qplot<span class="p">(</span>director<span class="p">,</span> weight <span class="o">=</span> minutes<span class="p">,</span> data <span class="o">=</span> movies<span class="p">,</span> geom <span class="o">=</span> <span class="s">&quot;bar&quot;</span><span class="p">,</span> ylab <span class="o">=</span> <span class="s">&quot;total length (min.)&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="http://dl.dropbox.com/u/10506/blog/r/ggplot2/total-length.png"><img src="http://dl.dropbox.com/u/10506/blog/r/ggplot2/total-length.png" alt="Total Running Time" /></a></p>

<h3>Line charts: geom = &#8220;line&#8221;</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='r'><span class='line'>qplot<span class="p">(</span>Sepal.Length<span class="p">,</span> Petal.Length<span class="p">,</span> data <span class="o">=</span> iris<span class="p">,</span> geom <span class="o">=</span> <span class="s">&quot;line&quot;</span><span class="p">,</span> color <span class="o">=</span> Species<span class="p">)</span>
</span><span class='line'><span class="c1"># Using a line geom doesn&#39;t really make sense here, but hey.</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="http://dl.dropbox.com/u/10506/blog/r/ggplot2/sepal-vs-petal-lined.png"><img src="http://dl.dropbox.com/u/10506/blog/r/ggplot2/sepal-vs-petal-lined.png" alt="Sepal vs. Petal, Lined" /></a></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='r'><span class='line'><span class="c1"># `Orange` is another built-in data frame that describes the growth of orange trees.</span>
</span><span class='line'>qplot<span class="p">(</span>age<span class="p">,</span> circumference<span class="p">,</span> data <span class="o">=</span> Orange<span class="p">,</span> geom <span class="o">=</span> <span class="s">&quot;line&quot;</span><span class="p">,</span>
</span><span class='line'>  colour <span class="o">=</span> Tree<span class="p">,</span>
</span><span class='line'>  main <span class="o">=</span> <span class="s">&quot;How does orange tree circumference vary with age?&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="http://dl.dropbox.com/u/10506/blog/r/ggplot2/orange-tree-growth.png"><img src="http://dl.dropbox.com/u/10506/blog/r/ggplot2/orange-tree-growth.png" alt="Orange Tree Growth" /></a></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='r'><span class='line'><span class="c1"># We can also plot both points and lines.</span>
</span><span class='line'>qplot<span class="p">(</span>age<span class="p">,</span> circumference<span class="p">,</span> data <span class="o">=</span> Orange<span class="p">,</span> geom <span class="o">=</span> c<span class="p">(</span><span class="s">&quot;point&quot;</span><span class="p">,</span> <span class="s">&quot;line&quot;</span><span class="p">),</span> colour <span class="o">=</span> Tree<span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="http://dl.dropbox.com/u/10506/blog/r/ggplot2/orange-tree-pointed.png"><img src="http://dl.dropbox.com/u/10506/blog/r/ggplot2/orange-tree-pointed.png" alt="Orange Tree with Points" /></a></p>

<p>And that&#8217;s it with what I&#8217;ll cover.</p>

<h1>Next Steps</h1>

<p>I skipped over a lot of aspects of R and ggplot2 in this intro.</p>

<p>For example,</p>

<ul>
<li>There are many geoms (and other functionalities) in ggplot2 that I didn&#8217;t cover, e.g., <a href="http://had.co.nz/ggplot2/geom_boxplot.html">boxplots</a> and <a href="http://had.co.nz/ggplot2/geom_histogram.html">histograms</a>.</li>
<li>I didn&#8217;t talk about ggplot2&#8217;s layering system, or the <a href="http://www.amazon.com/Grammar-Graphics-Statistics-Computing/dp/0387245448">grammar of graphics</a> it&#8217;s based on.</li>
</ul>


<p>So I&#8217;ll end with some additional resources on R and ggplot2.</p>

<ul>
<li>I don&#8217;t use it myself, but <a href="http://rstudio.org/">RStudio</a> is a popular IDE for R.</li>
<li>The <a href="http://had.co.nz/ggplot2/">official ggplot2 documentation</a> is great and has lots of examples. There&#8217;s also an excellent <a href="http://www.amazon.com/ggplot2-Elegant-Graphics-Data-Analysis/dp/0387981403">book</a>.</li>
<li><a href="http://plyr.had.co.nz/">plyr</a> is another fantastic R package that&#8217;s also by Hadley Wickham (the author of ggplot2).</li>
<li>The <a href="http://cran.r-project.org/doc/manuals/R-intro.html">official R introduction</a> is okay, but definitely not great. I haven&#8217;t found any R tutorials I really like, but I&#8217;ve heard good things about <a href="http://www.amazon.com/Art-Programming-Statistical-Software-Design/dp/1593273843">The Art of R Programming</a>.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introduction to Conditional Random Fields]]></title>
    <link href="http://echen.github.com/blog/2012/01/03/introduction-to-conditional-random-fields/"/>
    <updated>2012-01-03T16:02:25-08:00</updated>
    <id>http://echen.github.com/blog/2012/01/03/introduction-to-conditional-random-fields</id>
    <content type="html"><![CDATA[<h1>Introduction</h1>

<p>Imagine you have a sequence of snapshots from a day in Justin Bieber&#8217;s life, and you want to label each image with the activity it represents (eating, sleeping, driving, etc.). How can you do this?</p>

<p>One way is to ignore the sequential nature of the snapshots, and build a <em>per-image</em> classifier. For example, given a month&#8217;s worth of labeled snapshots, you might learn that dark images taken at 6am tend to be about sleeping, images with lots of bright colors tend to be about dancing, images of cars are about driving, and so on.</p>

<p>By ignoring this sequential aspect, however, you lose a lot of information. For example, what happens if you see a close-up picture of a mouth &#8211; is it about singing or eating? If you know that the <em>previous</em> image is a picture of Justin Bieber eating or cooking, then it&#8217;s more likely this picture is about eating; if, however, the previous image contains Justin Bieber singing or dancing, then this one probably shows him singing as well.</p>

<p>Thus, to increase the accuracy of our labeler, we should incorporate the labels of nearby photos, and this is precisely what a <strong>conditional random field</strong> does.</p>

<h1>Part-of-Speech Tagging</h1>

<p>Let&#8217;s go into some more detail, using the more common example of <strong>part-of-speech tagging</strong>.</p>

<p>In POS tagging, the goal is to label a sentence (a sequence of words or tokens) with tags like ADJECTIVE, NOUN, PREPOSITION, VERB, ADVERB, ARTICLE.</p>

<p>For example, given the sentence &#8220;Bob drank coffee at Starbucks&#8221;, the labeling might be &#8220;Bob (NOUN) drank (VERB) coffee (NOUN) at (PREPOSITION) Starbucks (NOUN)&#8221;.</p>

<p>So let&#8217;s build a conditional random field to label sentences with their parts of speech. Just like any classifier, we&#8217;ll first need to decide on a set of feature functions $f_i$.</p>

<h2>Feature Functions in a CRF</h2>

<p>In a CRF, each <strong>feature function</strong> is a function that takes in as input:</p>

<ul>
<li>a sentence s</li>
<li>the position i of a word in the sentence</li>
<li>the label $l_i$ of the current word</li>
<li>the label $l_{i-1}$ of the previous word</li>
</ul>


<p>and outputs a real-valued number (though the numbers are often just either 0 or 1).</p>

<p>(Note: by restricting our features to depend on only the <em>current</em> and <em>previous</em> labels, rather than arbitrary labels throughout the sentence, I&#8217;m actually building the special case of a <strong>linear-chain CRF</strong>. For simplicity, I&#8217;m going to ignore general CRFs in this post.)</p>

<p>For example, one possible feature function could measure how much we suspect that the current word should be labeled as an adjective given that the previous word is &#8220;very&#8221;.</p>

<h2>Features to Probabilities</h2>

<p>Next, assign each feature function $f_j$ a <strong>weight</strong> $\lambda_j$ (I&#8217;ll talk below about how to learn these weights from the data). Given a sentence s, we can now score a labeling l of s by adding up the weighted features over all words in the sentence:</p>

<p>$score(l | s) = \sum_{j = 1}^m \sum_{i = 1}^n \lambda_j f_j(s, i, l_i, l_{i-1})$</p>

<p>(The first sum runs over each feature function $j$, and the inner sum runs over each position $i$ of the sentence.)</p>

<p>Finally, we can transform these scores into probabilities $p(l | s)$ between 0 and 1 by exponentiating and normalizing:</p>

<p>$p(l | s) = \frac{exp[score(l|s)]}{\sum_{l&#8217;} exp[score(l&#8217;|s)]} = \frac{exp[\sum_{j = 1}^m \sum_{i = 1}^n \lambda_j f_j(s, i, l_i, l_{i-1})]}{\sum_{l&#8217;} exp[\sum_{j = 1}^m \sum_{i = 1}^n \lambda_j f_j(s, i, l&#8217;_i, l&#8217;_{i-1})]}$</p>

<h2>Example Feature Functions</h2>

<p>So what do these feature functions look like? Examples of POS tagging features could include:</p>

<ul>
<li>$f_1(s, i, l_i, l_{i-1}) = 1$ if $l_i =$ ADVERB and the ith word ends in &#8220;-ly&#8221;; 0 otherwise.

<ul>
<li>If the weight $\lambda_1$ associated with this feature is large and positive, then this feature is essentially saying that we prefer labelings where words ending in -ly get labeled as ADVERB.</li>
</ul>
</li>
<li>$f_2(s, i, l_i, l_{i-1}) = 1$ if $i = 1$, $l_i =$ VERB, and the sentence ends in a question mark; 0 otherwise.

<ul>
<li>Again, if the weight $\lambda_2$ associated with this feature is large and positive, then labelings that assign VERB to the first word in a question (e.g., &#8220;Is this a sentence beginning with a verb?&#8221;) are preferred.</li>
</ul>
</li>
<li>$f_3(s, i, l_i, l_{i-1}) = 1$ if $l_{i-1} =$ ADJECTIVE and $l_i =$ NOUN; 0 otherwise.

<ul>
<li>Again, a positive weight for this feature means that adjectives tend to be followed by nouns.</li>
</ul>
</li>
<li>$f_4(s, i, l_i, l_{i-1}) = 1$ if $l_{i-1} =$ PREPOSITION and $l_i =$ PREPOSITION.

<ul>
<li>A <em>negative</em> weight $\lambda_4$ for this function would mean that prepositions don&#8217;t tend to follow prepositions, so we should avoid labelings where this happens.</li>
</ul>
</li>
</ul>


<p>And that&#8217;s it! To sum up: to build a conditional random field, you just define a bunch of feature functions (which can depend on the entire sentence, a current position, and nearby labels), assign them weights, and add them all together, transforming at the end to a probability if necessary.</p>

<p>Now let&#8217;s step back and compare CRFs to some other common machine learning techniques.</p>

<h1>Smells like Logistic Regression&#8230;</h1>

<p>The form of the CRF probabilities
$p(l | s) = \frac{exp[\sum_{j = 1}^m \sum_{i = 1}^n f_j(s, i, l_i, l_{i-1})]}{\sum_{l&#8217;} exp[\sum_{j = 1}^m \sum_{i = 1}^n f_j(s, i, l&#8217;_i, l&#8217;_{i-1})]}$
might look <a href="http://en.wikipedia.org/wiki/Logistic_regression">familiar</a>.</p>

<p>That&#8217;s because CRFs are indeed basically the sequential version of <strong>logistic regression</strong>: whereas logistic regression is a log-linear model for <em>classification</em>, CRFs are a log-linear model for <em>sequential labels</em>.</p>

<h1>Looks like HMMs&#8230;</h1>

<p>Recall that <strong><a href="http://en.wikipedia.org/wiki/Hidden_Markov_model">Hidden Markov Models</a></strong> are another model for part-of-speech tagging (and sequential labeling in general). Whereas CRFs throw any bunch of functions together to get a label score, HMMs take a <em>generative</em> approach to labeling, defining</p>

<p>$p(l,s) = p(l_1) \prod_i p(l_i | l_{i-1}) p(w_i | l_i)$</p>

<p>where</p>

<ul>
<li>$p(l_i | l_{i-1})$ are <strong>transition</strong> probabilities (e.g., the probability that a preposition is followed by a noun);</li>
<li>$p(w_i | l_{i-1})$ are <strong>emission</strong> probabilities (e.g., the probability that a noun emits the word &#8220;dad&#8221;).</li>
</ul>


<p>So how do HMMs compare to CRFs? CRFs are more powerful &#8211; they can model everything HMMs can and more. One way of seeing this is as follows.</p>

<p>Note that the log of the HMM probability is $\log p(l,s) = \log p(l_0) + \sum_i \log p(l_i | l_{i-1}) + \sum_i \log p(w_i | l_i)$. This has exactly the log-linear form of a CRF if we consider these log-probabilities to be the weights associated to binary transition and emission indicator features.</p>

<p>That is, we can build a CRF equivalent to any HMM by&#8230;</p>

<ul>
<li>For each HMM <em>transition</em> probability $ p(l_i = y | l_{i-1} = x) $, define a set of CRF transition features of the form $f_{x,y}(s, i, l_i, l_{i-1}) = 1$ if $l_i = y$ and $l_{i-1} = x$. Give each feature a weight of $w_{x,y} = \log p(l_i = y | l_{i-1} = x)$.</li>
<li>Similarly, for each HMM <em>emission</em> probability $p(w_i = z | l_{i} = x)$, define a set of CRF emission features of the form $g_{x,y}(s, i, l_i, l_{i-1}) = 1$ if $w_i = z$ and $l_i = x$. Give each feature a weight of $w_{x,z} = \log p(w_i = z | l_i = x)$.</li>
</ul>


<p>Thus, the score $p(l|s)$ computed by a CRF using these feature functions is precisely proportional to the score computed by the associated HMM, and so every HMM is equivalent to some CRF.</p>

<p>However, CRFs can model a much richer set of label distributions as well, for two main reasons:</p>

<ul>
<li><strong>CRFs can define a much larger set of features.</strong> Whereas HMMs are necessarily <em>local</em> in nature (because they&#8217;re constrained to binary transition and emission feature functions, which force each word to depend only on the current label and each label to depend only on the previous label), CRFs can use more <em>global</em> features. For example, one of the features in our POS tagger above increased the probability of labelings that tagged the <em>first</em> word of a sentence as a VERB if the <em>end</em> of the sentence contained a question mark.</li>
<li><strong>CRFs can have arbitrary weights.</strong> Whereas the probabilities of an HMM must satisfy certain constraints (e.g., $0 &lt;= p(w_i | l_i) &lt;= 1, \sum_w p(w_i = w | l_1) = 1)$, the weights of a CRF are unrestricted (e.g., $\log p(w_i | l_i)$ can be anything it wants).</li>
</ul>


<h1>Learning Weights</h1>

<p>Let&#8217;s go back to the question of how to learn the feature weights in a CRF. One way is (surprise) to use <strong>gradient ascent</strong>.</p>

<p>Assume we have a bunch of training examples (sentences and associated part-of-speech labels). Randomly initialize the weights of our CRF model.
To shift these randomly initialized weights to the correct ones, for each training example&#8230;</p>

<ul>
<li>Go through each feature function $f_i$, and calculate the gradient of the log probability of the training example with respect to $\lambda_i$: $\frac{\partial}{\partial w_j} \log p(l | s) = \sum_{j = 1}^m f_i(s, j, l_j, l_{j-1}) - \sum_{l&#8217;} p(l&#8217; | s) \sum_{j = 1}^m f_i(s, j, l&#8217;_j, l&#8217;_{j-1})$</li>
<li>Note that the first term in the gradient is the contribution of feature $f_i$ under the <em>true</em> label, and the second term in the gradient is the <em>expected</em> contribution of feature $f_i$ under the current model. This is exactly the form you&#8217;d expect gradient ascent to take.</li>
<li>Move $\lambda_i$ in the direction of the gradient: $\lambda_i = \lambda_i + \alpha [\sum_{j = 1}^m f_i(s, j, l_j, l_{j-1}) - \sum_{l&#8217;} p(l&#8217; | s) \sum_{j = 1}^m f_i(s, j, l&#8217;_j, l&#8217;_{j-1})]$ where $\alpha$ is some learning rate.</li>
<li>Repeat the previous steps until some stopping condition is reached (e.g., the updates fall below some threshold).</li>
</ul>


<p>In other words, every step takes the difference between what we want the model to learn and the model&#8217;s current state, and moves $\lambda_i$ in the direction of this difference.</p>

<h1>Finding the Optimal Labeling</h1>

<p>Suppose we&#8217;ve trained our CRF model, and now a new sentence comes in. How do we do label it?</p>

<p>The naive way is to calculate $p(l | s)$ for every possible labeling l, and then choose the label that maximizes this probability. However, since there are $k^m$ possible labels for a tag set of size k and a sentence of length m, this approach would have to check an exponential number of labels.</p>

<p>A better way is to realize that (linear-chain) CRFs satisfy an <a href="http://en.wikipedia.org/wiki/Optimal_substructure">optimal substructure</a> property that allows us to use a (polynomial-time) dynamic programming algorithm to find the optimal label, similar to the <a href="http://en.wikipedia.org/wiki/Viterbi_algorithm">Viterbi algorithm</a> for HMMs.</p>

<h1>A More Interesting Application</h1>

<p>Okay, so part-of-speech tagging is kind of boring, and there are plenty of existing POS taggers out there. When might you use a CRF in real life?</p>

<p>Suppose you want to mine Twitter for the types of presents people received for Christmas:</p>

<blockquote class="twitter-tweet"><p>What people on Twitter wanted for Christmas, and what they got: <a href="http://t.co/EGeKTBgF" title="http://twitter.com/edchedch/status/153683967315419136/photo/1">twitter.com/edchedch/statu…</a></p>— Edwin Chen (@edchedch) <a href="https://twitter.com/edchedch/status/153683967315419136" data-datetime="2012-01-02T03:48:10+00:00">January 2, 2012</a></blockquote>


<script src="http://echen.github.com//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>(Yes, I just embedded a tweet. BOOM.)</p>

<p>How can you figure out which words refer to gifts?</p>

<p>To gather data for the graphs above, I simply looked for phrases of the form &#8220;I want XXX for Christmas&#8221; and &#8220;I got XXX for Christmas&#8221;. However, a more sophisticated CRF variant could use a GIFT part-of-speech-like tag (even adding other tags like GIFT-GIVER and GIFT-RECEIVER, to get even more information on who got what from whom) and treat this like a POS tagging problem. Features could be based around things like &#8220;this word is a GIFT if the previous word was a GIFT-RECEIVER and the word before that was &#8216;gave&#8217;&#8221; or &#8220;this word is a GIFT if the next two words are &#8216;for Christmas&#8217;&#8221;.</p>

<h1>Fin</h1>

<p>I&#8217;ll end with some more random thoughts:</p>

<ul>
<li>I explicitly skipped over the graphical models framework that conditional random fields sit in, because I don&#8217;t think they add much to an initial understanding of CRFs. But if you&#8217;re interested in learning more, Daphne Koller is teaching a free, online course on <a href="http://www.pgm-class.org/">graphical models</a> starting in January.</li>
<li>Or, if you&#8217;re more interested in the many NLP applications of CRFs (like part-of-speech tagging or <a href="http://en.wikipedia.org/wiki/Named-entity_recognition">named entity extraction</a>), Manning and Jurafsky are teaching an <a href="http://www.nlp-class.org/">NLP class</a> in the same spirit.</li>
<li>I also glossed a bit over the analogy between CRFs:HMMs and Logistic Regression:Naive Bayes. This image (from <a href="http://arxiv.org/pdf/1011.4088v1">Sutton and McCallum&#8217;s introduction to conditional random fields</a>) sums it up, and shows the graphical model nature of CRFs as well:</li>
</ul>


<p><a href="http://dl.dropbox.com/u/10506/blog/crfs/crf-diagram.png"><img src="http://dl.dropbox.com/u/10506/blog/crfs/crf-diagram.png" alt="CRF Diagram" /></a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Winning the Netflix Prize: A Summary]]></title>
    <link href="http://echen.github.com/blog/2011/10/24/winning-the-netflix-prize-a-summary/"/>
    <updated>2011-10-24T16:27:01-07:00</updated>
    <id>http://echen.github.com/blog/2011/10/24/winning-the-netflix-prize-a-summary</id>
    <content type="html"><![CDATA[<p>How was the <a href="http://en.wikipedia.org/wiki/Netflix_Prize">Netflix Prize</a> won? I went through a lot of the Netflix Prize papers a couple years ago, so I&#8217;ll try to give an overview of the techniques that went into the winning solution here.</p>

<h1>Normalization of Global Effects</h1>

<p>Suppose Alice rates Inception 4 stars. We can think of this rating as composed of several parts:</p>

<ul>
<li>A <strong>baseline rating</strong> (e.g., maybe the mean over all user-movie ratings is 3.1 stars).</li>
<li>An <strong>Alice-specific effect</strong> (e.g., maybe Alice tends to rate movies lower than the average user, so her ratings are -0.5 stars lower than we normally expect).</li>
<li>An <strong>Inception-specific effect</strong> (e.g., Inception is a pretty awesome movie, so its ratings are 0.7 stars higher than we normally expect).</li>
<li>A less predictable effect based on the <strong>specific interaction</strong> between Alice and Inception that accounts for the remainder of the stars (e.g., Alice really liked Inception because of its particular combination of Leonardo DiCaprio and neuroscience, so this rating gets an additional 0.7 stars).</li>
</ul>


<p>In other words, we&#8217;ve decomposed the 4-star rating into:
4 = [3.1 (the baseline rating) - 0.5 (the Alice effect) + 0.7 (the Inception effect)] + 0.7 (the specific interaction)</p>

<p>So instead of having our models predict the 4-star rating itself, we could first try to remove the effect of the baseline predictors (the first three components) and have them predict the specific 0.7 stars. (I guess you can also think of this as a simple kind of boosting.)</p>

<p>More generally, additional baseline predictors include:</p>

<ul>
<li>A factor that allows Alice&#8217;s rating to (linearly) depend on the (square root of the) <strong>number of days since her first rating</strong>. (For example, have you ever noticed that you become a harsher critic over time?)</li>
<li>A factor that allows Alice&#8217;s rating to depend on the <strong>number of days since the movie&#8217;s first rating by anyone</strong>. (If you&#8217;re one of the first people to watch it, maybe it&#8217;s because you&#8217;re a huge fan and really excited to see it on DVD, so you&#8217;ll tend to rate it higher.)</li>
<li>A factor that allows Alice&#8217;s rating to depend on the <strong>number of people who have rated Inception</strong>. (Maybe Alice is a hipster who hates being part of the crowd.)</li>
<li>A factor that allows Alice&#8217;s rating to <strong>depend on the movie&#8217;s overall rating</strong>.</li>
<li>(Plus a bunch of others.)</li>
</ul>


<p>And, in fact, modeling these biases turned out to be fairly important: in their paper describing their final solution to the Netflix Prize, Bell and Koren write that</p>

<p>Of the numerous new algorithmic contributions, I would like to highlight one &#8211; those humble baseline predictors (or biases), which capture main effects in the data. While the literature mostly concentrates on the more sophisticated algorithmic aspects, we have learned that an accurate treatment of main effects is probably at least as signficant as coming up with modeling breakthroughs.</p>

<p>(For a perhaps more concrete example of why removing these biases is useful, suppose you know that Bob likes the same kinds of movies that Alice does. To predict Bob&#8217;s rating of Inception, instead of simply predicting the same 4 stars that Alice rated, if we know that Bob tends to rate movies 0.3 stars higher than average, then we could first remove Alice&#8217;s bias and then add in Bob&#8217;s: 4 + 0.5 + 0.3 = 4.8.)</p>

<h1>Neighborhood Models</h1>

<p>Let&#8217;s now look at some slightly more sophisticated models. As alluded to in the section above, one of the standard approaches to collaborative filtering is to use neighborhood models.</p>

<p>Briefly, a neighborhood model works as follows. To predict Alice&#8217;s rating of Titanic, you could do two things:</p>

<ul>
<li><strong>Item-item approach</strong>: find a set of items similar to Titanic that Alice has also rated, and take the (weighted) mean of Alice&#8217;s ratings on them.</li>
<li><strong>User-user approach</strong>: find a set of users similar to Alice who rated Titanic, and again take the mean of their ratings of Titanic.</li>
</ul>


<p>(See also my post on <a href="http://blog.echen.me/2011/02/15/an-overview-of-item-to-item-collaborative-filtering-with-amazons-recommendation-system/">item-to-item collaborative filtering on Amazon</a>.)</p>

<p>The main questions, then, are (let&#8217;s stick to the item-item approach for simplicity):</p>

<ul>
<li>How do we find the set of similar items?</li>
<li>How do we weight these items when taking their mean?</li>
</ul>


<p>The standard approach is to take some similarity metric (e.g., correlation or a Jaccard index) to define similarities between pairs of movies, take the K most similar movies under this metric (where K is perhaps chosen via cross-validation), and then use the same similarity metric when computing the weighted mean.</p>

<p>This has a couple problems:</p>

<ul>
<li><strong>Neighbors aren&#8217;t independent</strong>, so using a standard similarity metric to define a weighted mean overcounts information. For example, suppose you ask five friends where you should eat tonight. Three of them went to Mexico last week and are sick of burritos, so they strongly recommend against a taqueria. Thus, your friends&#8217; recommendations have a stronger bias than what you&#8217;d get if you asked five friends who didn&#8217;t know each other at all. (Compare with the situation where all three Lord of the Rings Movies are neighbors of Harry Potter.)</li>
<li>Different movies should perhaps be using <strong>different numbers of neighbors</strong>. Some movies may be predicted well by only one neighbor (e.g., Harry Potter 2 could be predicted well by Harry Potter 1 alone), some movies may require more, and some movies may have no good neighbors (so you should ignore your neighborhood algorithms entirely and let your other ratings models stand on their own).</li>
</ul>


<p>So another approach is the following:</p>

<ul>
<li>You can still use a similarity metric like correlation or cosine similarity to choose the set of similar items.</li>
<li>But instead of using the similarity metric to define the interpolation weights in the mean calculations, you essentially perform a (sparse) <strong>linear regression to find the weights</strong> that minimize the squared error between an item&#8217;s rating and a linear combination of the ratings of its neighbors. Note that these weights are no longer constrained, so that if all neighbors are weak, then their weights will be close to zero and the neighborhood model will have a low effect.</li>
</ul>


<p>(A slightly more complicated user-user approach, similar to this item-item neighborhood approach, is also useful.)</p>

<h1>Implicit Data</h1>

<p>Adding on to the neighborhood approach, we can also let <strong>implicit data influence our predictions</strong>. The mere fact that a user rated lots of science fiction movies but no westerns, suggests that the user likes science fiction better than cowboys. So using a similar framework as in the neighborhood ratings model, we can learn for Inception a set of <strong>offset weights</strong> associated to Inception&#8217;s movie neighbors.</p>

<p>Whenever we want to predict how Bob rates Inception, we look at whether Bob rated each of Inception&#8217;s neighbors. If he did, we add in the corresponding offset; if not, then we add nothing (and, thus, Bob&#8217;s rating is implicitly penalized by the missing weight).</p>

<h1>Matrix Factorization</h1>

<p>Complementing the neighborhood approach to collaborative filtering is the matrix factorization approach. Whereas the neighborhood approach takes a very local approach to ratings (if you liked Harry Potter 1, then you&#8217;ll like Harry Potter 2!), the factorization approach takes a more global view (we know that you like fantasy movies and that Harry Potter has a strong fantasy element, so we think that you&#8217;ll like Harry Potter) that <strong>decomposes users and movies into a set of latent factors</strong> (which we can think of as categories like &#8220;fantasy&#8221; or &#8220;violence&#8221;).</p>

<p>In fact, matrix factorization methods were probably the most important class of techniques for winning the Netflix Prize. In their 2008 Progress Prize paper, Bell and Koren write</p>

<p>It seems that models based on matrix-factorization were found to be most accurate (and thus popular), as evident by recent publications and discussions on the Netflix Prize forum. We definitely agree to that, and would like to add that those matrix-factorization models also offer the important flexibility needed for modeling temporal effects and the binary view. Nonetheless, neighborhood models, which have been dominating most of the collaborative filtering literature, are still expected to be popular due to their practical characteristics - being able to handle new users/ratings without re-training and offering direct explanations to the recommendations.</p>

<p>The typical way to perform matrix factorizations is to perform a <strong>singular value decomposition</strong> on the (sparse) ratings matrix (using stochastic gradient descent and regularizing the weights of the factors, possibly constraining the weights to be positive to get a type of non-negative matrix factorization). (Note that this &#8220;SVD&#8221; is a little different from the standard SVD learned in linear algebra, since not every user has rated every movie and so the ratings matrix contains many missing elements that we don&#8217;t want to simply treat as 0.)</p>

<p>Some SVD-inspired methods used in the Netflix Prize include:</p>

<ul>
<li><strong>Standard SVD</strong>: Once you&#8217;ve represented users and movies as factor vectors, you can dot product Alice&#8217;s vector with Inception&#8217;s vector to get Alice&#8217;s predicted rating of Inception.</li>
<li><strong>Asymmetric SVD</strong>: Instead of users having their own notion of factor vectors, we can represent users as a bag of items they have rated (or provided implicit feedback for). So Alice is now represented as a (possibly weighted) sum of the factor vectors of the items she has rated, and to get her predicted rating of Titanic, we can dot product this  representation with the factor vector of Titanic. From a practical perspective, this model has an added benefit in that no user parameterizations are needed, so we can use this approach to generate recommendations as soon as a user provides some feedback (which could just be views or clicks on an item, and not necessarily ratings), without needing to retrain the model to factorize the user.</li>
<li><strong>SVD++</strong>: Incorporate both the standard SVD and the asymmetric SVD model by representing users both by their own factor representation and as a bag of item vectors.</li>
</ul>


<h1>Regression</h1>

<p>Some regression models were also used in the predictions. The models are fairly standard, I think, so I won&#8217;t spend too long here. Basically, just as with the neighborhood models, we can take a user-centric approach and a movie-centric approach to regression:</p>

<ul>
<li><strong>User-centric approach</strong>: We learn a regression model for each user, using all the movies that the user rated as the dataset. The response is the movie&#8217;s rating, and the predictor variables are attributes associated to that movie (which can be derived from, say, PCA, MDS, or an SVD).</li>
<li><strong>Movie-centric approach</strong>: Similarly, we can learn a regression model for each movie, using all the users that rated the movie as the dataset.</li>
</ul>


<h1>Restricted Boltzmann Machines</h1>

<p>Restricted Boltzmann Machines provide another kind of <strong>latent factor approach</strong> that can be used. See <a href="http://www.machinelearning.org/proceedings/icml2007/papers/407.pdf">this paper</a> for a description of how to apply them to the Netflix Prize. (In case the paper&#8217;s a little difficult to read, I wrote an <a href="http://blog.echen.me/2011/07/18/introduction-to-restricted-boltzmann-machines">introduction to RBMs</a> a little while ago.)</p>

<h1>Temporal Effects</h1>

<p>Many of the models incorporate temporal effects. For example, when describing the baseline predictors above, we used a few temporal predictors that allowed a user&#8217;s rating to (linearly) depend on the time since the first rating he ever made and on the time since a movie&#8217;s first rating. We can also get more fine-grained temporal effects by, say, binning items into a couple months&#8217; worth of ratings at a time, and allowing movie biases to change within each bin. (For example, maybe in May 2006, Time Magazine nominated Titanic as the best movie ever made, which caused a spurt in glowing ratings around that time.)</p>

<p>In the matrix factorization approach, user factors were also allowed to be time-dependent (e.g., maybe Bob comes to like comedy movies more and more over time). We can also give more weight to recent user actions.</p>

<h1>Regularization</h1>

<p>Regularization was also applied throughout pretty much all the models learned, to <strong>prevent overfitting</strong> on the dataset. Ridge regression was heavily used in the factorization models to penalize large weights, and lasso regression (though less effective) was useful as well. Many other parameters (e.g., the baseline predictors, similarity weights and interpolation weights in the neighborhood models) were also estimated using fairly standard shrinkage techniques.</p>

<h1>Ensemble Methods</h1>

<p>Finally, let&#8217;s talk about how all of these different algorithms were combined to provide a single rating that <strong>exploits the strengths of each model</strong>. (Note that, as mentioned above, many of these models were not trained on the raw ratings data directly, but rather on the residuals of other models.)</p>

<p>In the paper detailing their final solution, the winners describe using <strong>gradient boosted decision trees to combine over 500 models</strong>; previous solutions used instead a <strong>linear regression</strong> to combine the predictors.</p>

<p>Briefly, gradient boosted decision trees work by sequentially fitting a series of decision trees to the data; each tree is asked to predict the error made by the previous trees, and is often trained on slightly perturbed versions of the data. (For a longer description of a similar technique, see <a href="http://blog.echen.me/2011/03/14/laymans-introduction-to-random-forests/">my introduction to random forests</a>.)</p>

<p>Since GBDTs have a built-in ability to apply different methods to different slices of the data, we can add in some predictors that help the trees make useful clusterings:</p>

<ul>
<li>Number of movies each user rated</li>
<li>Number of users that rated each movie</li>
<li>Factor vectors of users and movies</li>
<li>Hidden units of a restricted Boltzmann Machine</li>
</ul>


<p>(For example, one thing that Bell and Koren found (when using an earlier ensemble method) was that RBMs are more useful when the movie or the user has a low number of ratings, and that matrix factorization methods are more useful when the movie or user has a high number of ratings.)</p>

<p>Here&#8217;s a graph of the effect of ensemble size from early on in the competition (in 2007), and the authors&#8217; take on it:</p>

<p><a href="http://www2.research.att.com/~volinsky/netflix/newensemble.gif"><img src="http://www2.research.att.com/~volinsky/netflix/newensemble.gif" alt="Ensemble Size vs. RMSE" /></a></p>

<p>However, we would like to stress that it is not necessary to have such a large number of models to do well. The plot below shows RMSE as a function of the number of methods used. One can achieve our winning score (RMSE=0.8712) with less than 50 methods, using the best 3 methods can yield RMSE &lt; 0.8800, which would land in the top 10. Even just using our single best method puts us on the leaderboard with an RMSE of 0.8890. The lesson here is that having lots of models is useful for the incremental results needed to win competitions, but practically, excellent systems can be built with just a few well-selected models.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Stuff Harvard People Like]]></title>
    <link href="http://echen.github.com/blog/2011/09/29/stuff-harvard-people-like/"/>
    <updated>2011-09-29T10:48:09-07:00</updated>
    <id>http://echen.github.com/blog/2011/09/29/stuff-harvard-people-like</id>
    <content type="html"><![CDATA[<p>What types of students go to which schools? There are, of course, the classic stereotypes:</p>

<ul>
<li><strong>MIT</strong> has the hacker engineers.</li>
<li><strong>Stanford</strong> has the laid-back, social folks.</li>
<li><strong>Harvard</strong> has the prestigious leaders of the world.</li>
<li><strong>Berkeley</strong> has the activist hippies.</li>
<li><strong>Caltech</strong> has the hardcore science nerds.</li>
</ul>


<p>But how well do these perceptions match reality? What are students at Stanford, Harvard, MIT, Caltech, and Berkeley <em>really</em> interested in? Following the path of my previous data-driven post on <a href="http://blog.echen.me/2011/04/18/twifferences-between-californians-and-new-yorkers/">differences between Silicon Valley and NYC</a>, I scraped the Quora profiles of a couple hundred followers of each school to find out.</p>

<h1>Topics</h1>

<p>So let&#8217;s look at what kinds of topics followers of each school are interested in*. (Skip past the lists for a discussion.)</p>

<h2>MIT</h2>

<p>Topics are followed by p(school = MIT|topic).</p>

<ul>
<li><strong>MIT Media Lab</strong>                             0.893</li>
<li><strong>Ksplice</strong>                                   0.69</li>
<li><strong>Lisp (programming language)</strong>               0.677</li>
<li><strong>Nokia</strong>                                     0.659</li>
<li><strong>Public Speaking</strong>                           0.65</li>
<li><strong>Data Storage</strong>                              0.65</li>
<li><strong>Google Voice</strong>                              0.609</li>
<li><strong>Hacking</strong>                                   0.602</li>
<li><strong>Startups in Europe</strong>                        0.597</li>
<li><strong>Startup Names</strong>                             0.572</li>
<li><strong>Mechanical Engineering</strong>                    0.563</li>
<li><strong>Engineering</strong>                               0.563</li>
<li><strong>Distributed Databases</strong>                     0.544</li>
<li><strong>StackOverflow</strong>                             0.536</li>
<li><strong>Boston</strong>                                    0.513</li>
<li><strong>Learning</strong>                                  0.507</li>
<li><strong>Open Source</strong>                               0.498</li>
<li><strong>Cambridge</strong>                                 0.496</li>
<li><strong>Public Relations</strong>                          0.493</li>
<li><strong>Visualization</strong>                             0.492</li>
<li><strong>Semantic Web</strong>                              0.486</li>
<li><strong>Andreessen-Horowitz</strong>                       0.483</li>
<li><strong>Nature</strong>                                    0.475</li>
<li><strong>Cryptography</strong>                              0.474</li>
<li><strong>Startups in Boston</strong>                        0.452</li>
<li><strong>Adobe Photoshop</strong>                           0.451</li>
<li><strong>Computer Security</strong>                         0.447</li>
<li><strong>Sachin Tendulkar</strong>                          0.443</li>
<li><strong>Hacker News</strong>                               0.442</li>
<li><strong>Games</strong>                                     0.429</li>
<li><strong>Android Applications</strong>                      0.428</li>
<li><strong>Best Engineers and Programmers</strong>            0.427</li>
<li><strong>College Admissions &amp; Getting Into College</strong> 0.422</li>
<li><strong>Co-Founders</strong>                               0.419</li>
<li><strong>Big Data</strong>                                  0.41</li>
<li><strong>System Administration</strong>                     0.4</li>
<li><strong>Biotechnology</strong>                             0.398</li>
<li><strong>Higher Education</strong>                          0.394</li>
<li><strong>NoSQL</strong>                                     0.387</li>
<li><strong>User Experience</strong>                           0.386</li>
<li><strong>Career Advice</strong>                             0.377</li>
<li><strong>Artificial Intelligence</strong>                   0.375</li>
<li><strong>Scalability</strong>                               0.37</li>
<li><strong>Taylor Swift</strong>                              0.368</li>
<li><strong>Google Search</strong>                             0.368</li>
<li><strong>Functional Programming</strong>                    0.365</li>
<li><strong>Bing</strong>                                      0.363</li>
<li><strong>Bioinformatics</strong>                            0.361</li>
<li><strong>How I Met Your Mother (TV series)</strong>         0.361</li>
<li><strong>Operating Systems</strong>                         0.356</li>
<li><strong>Compilers</strong>                                 0.355</li>
<li><strong>Google Chrome</strong>                             0.354</li>
<li><strong>Management &amp; Organizational Leadership</strong>    0.35</li>
<li><strong>Literary Fiction</strong>                          0.35</li>
<li><strong>Intelligence</strong>                              0.348</li>
<li><strong>Fight Club (1999 movie)</strong>                   0.344</li>
<li><strong>Hip Hop Music</strong>                             0.34</li>
<li><strong>UX Design</strong>                                 0.337</li>
<li><strong>Web Application Frameworks</strong>                0.336</li>
<li><strong>Startups in New York City</strong>                 0.333</li>
<li><strong>Book Recommendations</strong>                      0.33</li>
<li><strong>Engineering Recruiting</strong>                    0.33</li>
<li><strong>Search Engines</strong>                            0.329</li>
<li><strong>Social Search</strong>                             0.329</li>
<li><strong>Data Science</strong>                              0.328</li>
<li><strong>History</strong>                                   0.328</li>
<li><strong>Interaction Design</strong>                        0.326</li>
<li><strong>Classification (machine learning)</strong>         0.322</li>
<li><strong>Startup Incubators and Seed Programs</strong>      0.321</li>
<li><strong>Graphic Design</strong>                            0.321</li>
<li><strong>Product Design (software)</strong>                 0.319</li>
<li><strong>The College Experience</strong>                    0.319</li>
<li><strong>Writing</strong>                                   0.319</li>
<li><strong>MapReduce</strong>                                 0.318</li>
<li><strong>Database Systems</strong>                          0.315</li>
<li><strong>User Interfaces</strong>                           0.314</li>
<li><strong>Literature</strong>                                0.314</li>
<li><strong>C (programming language)</strong>                  0.314</li>
<li><strong>Television</strong>                                0.314</li>
<li><strong>Reading</strong>                                   0.313</li>
<li><strong>Usability</strong>                                 0.312</li>
<li><strong>Books</strong>                                     0.312</li>
<li><strong>Computers</strong>                                 0.311</li>
<li><strong>Stealth Startups</strong>                          0.311</li>
<li><strong>Daft Punk</strong>                                 0.31</li>
<li><strong>Healthy Eating</strong>                            0.309</li>
<li><strong>Innovation</strong>                                0.309</li>
<li><strong>Skiing</strong>                                    0.305</li>
<li><strong>JavaScript</strong>                                0.304</li>
<li><strong>Rock Music</strong>                                0.304</li>
<li><strong>Mozilla Firefox</strong>                           0.304</li>
<li><strong>Self-Improvement</strong>                          0.303</li>
<li><strong>McKinsey &amp; Company</strong>                        0.302</li>
<li><strong>AngelList</strong>                                 0.301</li>
<li><strong>Data Visualization</strong>                        0.301</li>
<li><strong>Cassandra (database)</strong>                      0.301</li>
</ul>


<h2>Stanford</h2>

<p>Topics are followed by p(school = Stanford|topic).</p>

<ul>
<li><strong>Stanford Computer Science</strong>                 0.951</li>
<li><strong>Stanford Graduate School of Business</strong>      0.939</li>
<li><strong>Stanford</strong>                                  0.896</li>
<li><strong>Stanford Football</strong>                         0.896</li>
<li><strong>Stanford Cardinal</strong>                         0.896</li>
<li><strong>Social Dance</strong>                              0.847</li>
<li><strong>Stanford University Courses</strong>               0.847</li>
<li><strong>Romance</strong>                                   0.769</li>
<li><strong>Instagram</strong>                                 0.745</li>
<li><strong>College Football</strong>                          0.665</li>
<li><strong>Mobile Location Applications</strong>              0.634</li>
<li><strong>Online Communities</strong>                        0.621</li>
<li><strong>Interpersonal Relationships</strong>               0.585</li>
<li><strong>Food &amp; Restaurants in Palo Alto</strong>           0.572</li>
<li><strong>Your 20s</strong>                                  0.566</li>
<li><strong>Men&#8217;s Fashion</strong>                             0.548</li>
<li><strong>Flipboard</strong>                                 0.537</li>
<li><strong>Inception (2010 movie)</strong>                    0.535</li>
<li><strong>Tumblr</strong>                                    0.531</li>
<li><strong>People Skills</strong>                             0.522</li>
<li><strong>Exercise</strong>                                  0.52</li>
<li><strong>Joel Spolsky</strong>                              0.516</li>
<li><strong>Valuations</strong>                                0.515</li>
<li><strong>The Social Network (2010 movie)</strong>           0.513</li>
<li><strong>LeBron James</strong>                              0.506</li>
<li><strong>Northern California</strong>                       0.506</li>
<li><strong>Evernote</strong>                                  0.5</li>
<li><strong>Quora Community</strong>                           0.5</li>
<li><strong>Blogging</strong>                                  0.49</li>
<li><strong>Downtown Palo Alto</strong>                        0.487</li>
<li><strong>The College Experience</strong>                    0.485</li>
<li><strong>Consumer Internet</strong>                         0.477</li>
<li><strong>Restaurants in San Francisco</strong>              0.477</li>
<li><strong>Chad Hurley</strong>                               0.47</li>
<li><strong>Meditation</strong>                                0.468</li>
<li><strong>Yishan Wong</strong>                               0.466</li>
<li><strong>Arrested Development (TV series)</strong>          0.463</li>
<li><strong>fbFund</strong>                                    0.457</li>
<li><strong>Best Engineers at X Company</strong>               0.451</li>
<li><strong>Language</strong>                                  0.45</li>
<li><strong>Words</strong>                                     0.448</li>
<li><strong>Happiness</strong>                                 0.447</li>
<li><strong>Path (company)</strong>                            0.446</li>
<li><strong>Color Labs (startup)</strong>                      0.446</li>
<li><strong>Palo Alto</strong>                                 0.445</li>
<li><strong>Woot.com</strong>                                  0.442</li>
<li><strong>Beer</strong>                                      0.442</li>
<li><strong>PayPal</strong>                                    0.441</li>
<li><strong>Women in Startups</strong>                         0.438</li>
<li><strong>Techmeme</strong>                                  0.433</li>
<li><strong>Women in Engineering</strong>                      0.428</li>
<li><strong>The Mission (San Francisco neighborhood)</strong>  0.427</li>
<li><strong>iPhone Applications</strong>                       0.416</li>
<li><strong>Asana</strong>                                     0.413</li>
<li><strong>Monetization</strong>                              0.412</li>
<li><strong>Repetitive Strain Injury (RSI)</strong>            0.4</li>
<li><strong>IDEO</strong>                                      0.398</li>
<li><strong>Spotify</strong>                                   0.397</li>
<li><strong>San Francisco Giants</strong>                      0.396</li>
<li><strong>Fortune Magazine</strong>                          0.389</li>
<li><strong>Love</strong>                                      0.387</li>
<li><strong>Human-Computer Interaction</strong>                0.382</li>
<li><strong>Hip Hop Music</strong>                             0.378</li>
<li><strong>Self-Improvement</strong>                          0.378</li>
<li><strong>Food in San Francisco</strong>                     0.375</li>
<li><strong>Quora (company)</strong>                           0.374</li>
<li><strong>Quora Infrastructure</strong>                      0.373</li>
<li><strong>iPhone</strong>                                    0.371</li>
<li><strong>Square (company)</strong>                          0.369</li>
<li><strong>Social Psychology</strong>                         0.369</li>
<li><strong>Network Effects</strong>                           0.366</li>
<li><strong>Chris Sacca</strong>                               0.365</li>
<li><strong>Walt Mossberg</strong>                             0.364</li>
<li><strong>Salesforce.com</strong>                            0.362</li>
<li><strong>Sex</strong>                                       0.361</li>
<li><strong>Etiquette</strong>                                 0.361</li>
<li><strong>David Pogue</strong>                               0.361</li>
<li><strong>Gowalla</strong>                                   0.36</li>
<li><strong>iOS Development</strong>                           0.354</li>
<li><strong>Palantir Technologies</strong>                     0.353</li>
<li><strong>Mobile Computing</strong>                          0.347</li>
<li><strong>Sports</strong>                                    0.346</li>
<li><strong>Video Games</strong>                               0.345</li>
<li><strong>Burning Man</strong>                               0.345</li>
<li><strong>Engineering Management</strong>                    0.343</li>
<li><strong>Cognitive Science</strong>                         0.342</li>
<li><strong>Dating &amp; Relationships</strong>                    0.341</li>
<li><strong>Fred Wilson (venture investor)</strong>            0.337</li>
<li><strong>Taiwan</strong>                                    0.333</li>
<li><strong>Natural Language Processing</strong>               0.33</li>
<li><strong>Eric Schmidt</strong>                              0.329</li>
<li><strong>Social Advice</strong>                             0.329</li>
<li><strong>Engineering Recruiting</strong>                    0.328</li>
<li><strong>Job Interviews</strong>                            0.325</li>
<li><strong>Mobile Phones</strong>                             0.324</li>
<li><strong>Twitter Inc. (company)</strong>                    0.321</li>
<li><strong>Engineering in Silicon Valley</strong>             0.321</li>
<li><strong>San Francisco Bay Area</strong>                    0.321</li>
<li><strong>Google Analytics</strong>                          0.32</li>
<li><strong>Fashion</strong>                                   0.315</li>
<li><strong>Interaction Design</strong>                        0.314</li>
<li><strong>Open Graph</strong>                                0.313</li>
<li><strong>Drugs &amp; Pharmaceuticals</strong>                   0.312</li>
<li><strong>Electronic Music</strong>                          0.312</li>
<li><strong>Facebook Inc. (company)</strong>                   0.309</li>
<li><strong>Fitness</strong>                                   0.309</li>
<li><strong>YouTube</strong>                                   0.308</li>
<li><strong>TED Talks</strong>                                 0.308</li>
<li><strong>Freakonomics (2005 Book)</strong>                  0.307</li>
<li><strong>Jack Dorsey</strong>                               0.306</li>
<li><strong>Nutrition</strong>                                 0.305</li>
<li><strong>Puzzles</strong>                                   0.305</li>
<li><strong>Silicon Valley Mergers &amp; Acquisitions</strong>     0.304</li>
<li><strong>Viral Growth &amp; Analytics</strong>                  0.304</li>
<li><strong>Amazon Web Services</strong>                       0.304</li>
<li><strong>StumbleUpon</strong>                               0.303</li>
<li><strong>Exceptional Comment Threads</strong>               0.303</li>
</ul>


<h2>Harvard</h2>

<ul>
<li><strong>Harvard Business School</strong>                   0.968</li>
<li><strong>Harvard Business Review</strong>                   0.922</li>
<li><strong>Harvard Square</strong>                            0.912</li>
<li><strong>Harvard Law School</strong>                        0.912</li>
<li><strong>Jimmy Fallon</strong>                              0.899</li>
<li><strong>Boston Red Sox</strong>                            0.658</li>
<li><strong>Klout</strong>                                     0.644</li>
<li><strong>Oprah Winfrey</strong>                             0.596</li>
<li><strong>Ivanka Trump</strong>                              0.587</li>
<li><strong>Dalai Lama</strong>                                0.569</li>
<li><strong>Food in New York City</strong>                     0.565</li>
<li><strong>U2</strong>                                        0.562</li>
<li><strong>TwitPic</strong>                                   0.534</li>
<li><strong>37signals</strong>                                 0.522</li>
<li><strong>David Lynch (director)</strong>                    0.512</li>
<li><strong>Al Gore</strong>                                   0.508</li>
<li><strong>TechStars</strong>                                 0.49</li>
<li><strong>Baseball</strong>                                  0.487</li>
<li><strong>Private Equity</strong>                            0.471</li>
<li><strong>Classical Music</strong>                           0.46</li>
<li><strong>Startups in New York City</strong>                 0.458</li>
<li><strong>HootSuite</strong>                                 0.449</li>
<li><strong>Kiva</strong>                                      0.442</li>
<li><strong>Ultimate Frisbee</strong>                          0.441</li>
<li><strong>Huffington Post</strong>                           0.436</li>
<li><strong>New York City</strong>                             0.433</li>
<li><strong>Charlie Cheever</strong>                           0.433</li>
<li><strong>The New York Times</strong>                        0.431</li>
<li><strong>Technology Journalism</strong>                     0.431</li>
<li><strong>McKinsey &amp; Company</strong>                        0.427</li>
<li><strong>TweetDeck</strong>                                 0.422</li>
<li><strong>How Does X Work?</strong>                          0.417</li>
<li><strong>Ashton Kutcher</strong>                            0.414</li>
<li><strong>Coldplay</strong>                                  0.402</li>
<li><strong>Conan O&#8217;Brien</strong>                             0.397</li>
<li><strong>Fast Company</strong>                              0.397</li>
<li><strong>WikiLeaks</strong>                                 0.394</li>
<li><strong>Michael Jackson</strong>                           0.389</li>
<li><strong>Guy Kawasaki</strong>                              0.389</li>
<li><strong>Journalism</strong>                                0.384</li>
<li><strong>Wall Street Journal</strong>                       0.384</li>
<li><strong>Cambridge</strong>                                 0.371</li>
<li><strong>Seattle</strong>                                   0.37</li>
<li><strong>Cities &amp; Metro Areas</strong>                      0.357</li>
<li><strong>Boston</strong>                                    0.353</li>
<li><strong>Tim Ferriss (author)</strong>                      0.35</li>
<li><strong>The New Yorker</strong>                            0.343</li>
<li><strong>Law</strong>                                       0.34</li>
<li><strong>Mashable</strong>                                  0.338</li>
<li><strong>Politics</strong>                                  0.335</li>
<li><strong>The Economist</strong>                             0.334</li>
<li><strong>Barack Obama</strong>                              0.333</li>
<li><strong>Skiing</strong>                                    0.329</li>
<li><strong>McKinsey Quarterly</strong>                        0.325</li>
<li><strong>Wired (magazine)</strong>                          0.316</li>
<li><strong>Bill Gates</strong>                                0.31</li>
<li><strong>Mad Men (TV series)</strong>                       0.308</li>
<li><strong>India</strong>                                     0.306</li>
<li><strong>TED Talks</strong>                                 0.306</li>
<li><strong>Netflix</strong>                                   0.304</li>
<li><strong>Wine</strong>                                      0.303</li>
<li><strong>Angel Investors</strong>                           0.302</li>
<li><strong>Facebook Ads</strong>                              0.301</li>
</ul>


<h2>UC Berkeley</h2>

<ul>
<li><strong>Berkeley</strong>                                  0.978</li>
<li><strong>UC Riverside</strong>                              0.92</li>
<li><strong>California Golden Bears</strong>                   0.91</li>
<li><strong>Internships</strong>                               0.717</li>
<li><strong>Web Marketing</strong>                             0.484</li>
<li><strong>Google Social Strategy</strong>                    0.453</li>
<li><strong>Southwest Airlines</strong>                        0.451</li>
<li><strong>WordPress</strong>                                 0.429</li>
<li><strong>Stock Market</strong>                              0.429</li>
<li><strong>BMW (automobile)</strong>                          0.428</li>
<li><strong>Web Applications</strong>                          0.423</li>
<li><strong>Flickr</strong>                                    0.422</li>
<li><strong>Snowboarding</strong>                              0.42</li>
<li><strong>Electronic Music</strong>                          0.404</li>
<li><strong>MySQL</strong>                                     0.401</li>
<li><strong>Internet Advertising</strong>                      0.399</li>
<li><strong>Search Engine Optimization (SEO)</strong>          0.398</li>
<li><strong>Yelp</strong>                                      0.396</li>
<li><strong>Groupon</strong>                                   0.393</li>
<li><strong>In-N-Out Burger</strong>                           0.391</li>
<li><strong>The Matrix (1999 movie)</strong>                   0.389</li>
<li><strong>Trading (finance)</strong>                         0.385</li>
<li><strong>jQuery</strong>                                    0.381</li>
<li><strong>Hedge Funds</strong>                               0.378</li>
<li><strong>Social Media Marketing</strong>                    0.377</li>
<li><strong>San Francisco</strong>                             0.376</li>
<li><strong>Stealth Startups</strong>                          0.362</li>
<li><strong>Yahoo!</strong>                                    0.36</li>
<li><strong>Cascading Style Sheets</strong>                    0.359</li>
<li><strong>Angel Investors</strong>                           0.355</li>
<li><strong>UX Design</strong>                                 0.35</li>
<li><strong>StarCraft</strong>                                 0.348</li>
<li><strong>Los Angeles Lakers</strong>                        0.347</li>
<li><strong>Mountain View</strong>                             0.345</li>
<li><strong>How I Met Your Mother (TV series)</strong>         0.338</li>
<li><strong>Google+</strong>                                   0.337</li>
<li><strong>Ruby on Rails</strong>                             0.333</li>
<li><strong>Reading</strong>                                   0.333</li>
<li><strong>Social Media</strong>                              0.326</li>
<li><strong>China</strong>                                     0.322</li>
<li><strong>Palantir Technologies</strong>                     0.319</li>
<li><strong>Facebook Platform</strong>                         0.315</li>
<li><strong>Basketball</strong>                                0.315</li>
<li><strong>Education</strong>                                 0.314</li>
<li><strong>Business Development</strong>                      0.312</li>
<li><strong>Online &amp; Mobile Payments</strong>                  0.305</li>
<li><strong>Restaurants in San Francisco</strong>              0.302</li>
<li><strong>Technology Companies</strong>                      0.302</li>
<li><strong>Seth Godin</strong>                                0.3</li>
</ul>


<h2>Caltech</h2>

<ul>
<li><strong>Pasadena</strong>                                  0.969</li>
<li><strong>Chess</strong>                                     0.748</li>
<li><strong>Table Tennis</strong>                              0.671</li>
<li><strong>UCLA</strong>                                      0.67</li>
<li><strong>MacBook Pro</strong>                               0.618</li>
<li><strong>Physics</strong>                                   0.618</li>
<li><strong>Haskell</strong>                                   0.582</li>
<li><strong>Los Angeles</strong>                               0.58</li>
<li><strong>Electrical Engineering</strong>                    0.567</li>
<li><strong>Star Trek (movie</strong>                          0.561</li>
<li><strong>Disruptive Technology</strong>                     0.545</li>
<li><strong>Science</strong>                                   0.53</li>
<li><strong>Biology</strong>                                   0.526</li>
<li><strong>Quantum Mechanics</strong>                         0.521</li>
<li><strong>LaTeX</strong>                                     0.514</li>
<li><strong>Mathematics</strong>                               0.488</li>
<li><strong>xkcd</strong>                                      0.488</li>
<li><strong>Genetics &amp; Heredity</strong>                       0.487</li>
<li><strong>Chemistry</strong>                                 0.47</li>
<li><strong>Medicine &amp; Healthcare</strong>                     0.448</li>
<li><strong>Poker</strong>                                     0.445</li>
<li><strong>C++ (programming language)</strong>                0.442</li>
<li><strong>Data Structures</strong>                           0.434</li>
<li><strong>Emacs</strong>                                     0.428</li>
<li><strong>MongoDB</strong>                                   0.423</li>
<li><strong>Neuroscience</strong>                              0.404</li>
<li><strong>Science Fiction</strong>                           0.4</li>
<li><strong>Mac OS X</strong>                                  0.394</li>
<li><strong>Board Games</strong>                               0.387</li>
<li><strong>Computers</strong>                                 0.386</li>
<li><strong>Research</strong>                                  0.385</li>
<li><strong>Finance</strong>                                   0.385</li>
<li><strong>The Future</strong>                                0.379</li>
<li><strong>Linux</strong>                                     0.378</li>
<li><strong>The Colbert Report</strong>                        0.376</li>
<li><strong>The Beatles</strong>                               0.374</li>
<li><strong>The Onion</strong>                                 0.365</li>
<li><strong>Ruby</strong>                                      0.363</li>
<li><strong>Cars &amp; Automobiles</strong>                        0.361</li>
<li><strong>Quantitative Finance</strong>                      0.359</li>
<li><strong>Academia</strong>                                  0.359</li>
<li><strong>Law</strong>                                       0.355</li>
<li><strong>Cooking</strong>                                   0.354</li>
<li><strong>Psychology</strong>                                0.349</li>
<li><strong>Eminem</strong>                                    0.347</li>
<li><strong>Football (Soccer)</strong>                         0.346</li>
<li><strong>Computer Programming</strong>                      0.343</li>
<li><strong>Algorithms</strong>                                0.343</li>
<li><strong>Evolutionary Biology</strong>                      0.337</li>
<li><strong>Behavioral Economics</strong>                      0.335</li>
<li><strong>California</strong>                                0.329</li>
<li><strong>Machine Learning</strong>                          0.326</li>
<li><strong>Futurama</strong>                                  0.324</li>
<li><strong>Social Advice</strong>                             0.324</li>
<li><strong>StarCraft II</strong>                              0.319</li>
<li><strong>Job Interview Questions</strong>                   0.318</li>
<li><strong>Game Theory</strong>                               0.316</li>
<li><strong>This American Life</strong>                        0.315</li>
<li><strong>Economics</strong>                                 0.314</li>
<li><strong>Vim</strong>                                       0.31</li>
<li><strong>Graduate School</strong>                           0.309</li>
<li><strong>Git (revision control)</strong>                    0.306</li>
<li><strong>Computer Science</strong>                          0.303</li>
</ul>


<p>What do we see?</p>

<ul>
<li>First, in a nice validation of this approach, we find that each school is interested in exactly the <strong>locations</strong> we&#8217;d expect: Caltech is interested in <em>Pasadena</em> and <em>Los Angeles</em>; MIT and Harvard are both interested in <em>Boston</em> and <em>Cambridge</em> (Harvard is interested in <em>New York City</em> as well); Stanford is interested in <em>Palo Alto</em>, <em>Northern California</em>, and <em>San Francisco Bay Area</em>; and Berkeley is interested in <em>Berkeley</em>, <em>San Francisco</em>, and <em>Mountain View</em>.</li>
<li>More interestingly, let&#8217;s look at where each school likes to <strong>eat</strong>. Stereotypically, we expect Harvard, Stanford, and Berkeley students to be more outgoing and social, and MIT and Caltech students to be more introverted. This is indeed what we find:

<ul>
<li>Harvard follows <em>Food in New York City</em>; Stanford follows <em>Food &amp; Restaurants in Palo Alto</em>, <em>Restaurants in San Francisco</em>, and <em>Food in San Francisco</em>; and Berkeley follows <em>Restaurants in San Francisco</em> and <em>In-N-Out Burger</em>. In other words, Harvard, Stanford, and Berkeley love eating out.</li>
<li>Caltech, on the other hand, loves <em>Cooking</em>, and MIT loves <em>Healthy Eating</em> &#8211; both signs, perhaps, of a preference for eating in.</li>
</ul>
</li>
<li>And what does each university use to quench their <strong>thirst</strong>? Harvard students like to drink <em>wine</em> (classy!), while Stanford students prefer <em>beer</em> (the social drink of choice).</li>
<li>What about <strong>sports teams</strong>? MIT and Caltech couldn&#8217;t care less, though Harvard follows the <em>Boston Red Sox</em>, Stanford follows the <em>San Francisco Giants</em> (as well as their own <em>Stanford Football</em> and <em>Stanford Cardinal</em>), and Berkeley follows the <em>Los Angeles Lakers</em> (and the <em>California Golden Bears</em>).</li>
<li>For <strong>sports</strong> themselves, MIT students like <em>skiing</em>; Stanford students like <em>general exercise</em>, <em>fitness</em>, and <em>sports</em>; Harvard students like <em>baseball</em>, <em>ultimate frisbee</em>, and <em>skiing</em>; and Berkeley students like <em>snowboarding</em>. Caltech, in a league of its own, enjoys <em>table tennis</em> and <em>chess</em>.</li>
<li>What does each school think of <strong>social</strong>? Caltech students look for Social <em>Advice</em>. Berkeley students are interested in Social <em>Media</em> and Social Media Marketing. MIT, on the more technical side, wants Social <em>Search</em>. Stanford students, predictably, love the whole spectrum of social offerings, from Social <em>Dance</em> and <em>The Social Network</em>, to Social <em>Psychology</em> and Social <em>Advice</em>. (Interestingly, Caltech and Stanford are both interested in Social Advice, though I wonder if it&#8217;s for slightly different reasons.)</li>
<li>What&#8217;s each school&#8217;s relationship with <strong>computers</strong>? Caltech students are interested in Computer <em>Science</em>, MIT hackers are interested in Computer <em>Security</em>, and Stanford students are interested in Human-Computer <em>Interaction</em>.</li>
<li>Digging into the <strong>MIT vs. Caltech</strong> divide a little, we see that Caltech students really are more interested in the pure sciences (<em>Physics, Science, Biology, Quantum Mechanics, Mathematics, Chemistry</em>, etc.), while MIT students are more on the applied and engineering sides (<em>Mechanical Engineering, Engineering, Distributed Databases, Cryptography, Computer Security, Biotechnology, Operating Systems, Compilers</em>, etc.).</li>
<li>Regarding <strong>programming languages</strong>, Caltech students love <em>Haskell</em> (hardcore purity!), while MIT students love <em>Lisp</em>.</li>
<li>What does each school like to <strong>read</strong>, both offline and online? Caltech loves <em>science fiction</em>, <em>xkcd</em>, and <em>The Onion</em>; MIT likes <em>Hacker News</em>; Harvard loves journals, newspapers, and magazines (<em>Huffington Post</em>, the <em><a href="http://stuffwhitepeoplelike.com/2008/01/31/45-the-sunday-new-york-times/">New York Times</a></em>, <em>Fortune, Wall Street Journal, the New Yorker, the Economist</em>, and so on); and Stanford likes <em>TechMeme</em>.</li>
<li>What <strong>movies and television shows</strong> does each school like to watch? Caltech likes <em>Star Trek</em>, the <em>Colbert Report</em>, and <em>Futurama</em>. MIT likes <em>Fight Club</em> (I don&#8217;t know what this has to do with MIT, though I will note that on my first day as a freshman in a new dorm, Fight Club was precisely the movie we all went to a lecture hall to see). Stanford likes <em>The Social Network</em> and <em>Inception</em>. Harvard, rather fittingly, likes <em><a href="http://stuffwhitepeoplelike.com/2009/03/11/123-mad-men/">Mad Men</a></em> and <em><a href="http://stuffwhitepeoplelike.com/2010/09/08/134-the-ted-conference/">Ted Talks</a></em>.</li>
<li>Let&#8217;s look at the <strong>startups</strong> each school follows. MIT, of course, likes <em>Ksplice</em>. Berkeley likes <em>Yelp</em> and <em>Groupon</em>. Stanford likes just about every startup under the sun (<em>Instagram, Flipboard, Tumblr, Path, Color Labs</em>, etc.). And Harvard, that bastion of hard-won influence and prestige? To the surprise of precisely no one, Harvard enjoys <em>Klout</em>.</li>
</ul>


<p>Let&#8217;s end with a summarized view of each school:</p>

<ul>
<li><strong>Caltech</strong> is very much into the sciences (<em>Physics, Biology, Quantum Mechanics, Mathematics</em>, etc.), as well as many pretty nerdy topics (<em>Star Trek, Science Fiction, xkcd, Futurama, Starcraft II</em>, etc.).</li>
<li><strong>MIT</strong> is dominated by everything engineering and tech.</li>
<li><strong>Stanford</strong> loves relationships (<em>interpersonal relationships, people skills, love, network effects, sex, etiquette, dating and relationships, romance</em>), health and appearance (<em>fashion, fitness, nutrition, happiness</em>), and startups (<em>Instagram, Flipboard, Path, Color Labs</em>, etc.).</li>
<li><strong>Berkeley</strong>, sadly, is perhaps too large and diverse for an overall characterization.</li>
<li><strong>Harvard</strong> students are fascinated by famous figures (<em>Jimmy Fallon, Oprah Winfrey, Invaka Trump, Dalai Lama, David Lynch, Al Gore, Bill Gates, Barack Obama</em>), and by prestigious newspapers, journals, and magazines (<em>Fortune, the New York Times, the Wall Street Journal, the Economist</em>, and so on). Other very fitting interests include <em><a href="http://stuffwhitepeoplelike.com/2008/01/21/12-non-profit-organizations/">Kiva</a>, <a href="http://stuffwhitepeoplelike.com/2008/09/01/108-appearing-to-enjoy-classical-music/">classical music</a></em>, and <em><a href="http://www.vanityfair.com/online/daily/2008/06/coldplay">Coldplay</a></em>.</li>
</ul>


<p>*I pulled about 400 followers from each school, and added a couple filters, to try to ensure that followers were actual attendees of the schools rather than general people simply interested in them. Topics are sorted using a naive Bayes score and filtered to have at least 5 counts. Also, a word of warning: my dataset was fairly small and users on Quora are almost certainly not representative of their schools as a whole (though I tried to be rigorous with what I had).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Information Transmission in a Social Network: Dissecting the Spread of a Quora Post]]></title>
    <link href="http://echen.github.com/blog/2011/09/07/information-transmission-in-a-social-network-dissecting-the-spread-of-a-quora-post/"/>
    <updated>2011-09-07T11:15:11-07:00</updated>
    <id>http://echen.github.com/blog/2011/09/07/information-transmission-in-a-social-network-dissecting-the-spread-of-a-quora-post</id>
    <content type="html"><![CDATA[<p><strong>tl;dr</strong> See <a href="http://www.youtube.com/watch?v=cZ4Ntg4jQHw">this movie visualization</a> for a case study on how a post propagates through Quora.</p>

<p>How does information spread through a network? Much of Quora&#8217;s appeal, after all, lies in its social graph &#8211; and when you&#8217;ve got a network of users, all broadcasting their activities to their neighbors, information can cascade in multiple ways. How do these social designs affect which users see what?</p>

<p>Think, for example, of what happens when your kid learns a new slang word at school. He doesn&#8217;t confine his use of the word to McKinley Elementary&#8217;s particular boundaries, between the times of 9-3pm &#8211; he introduces it to his friends from other schools at soccer practice as well. A couple months later, he even says it at home for the first time; you like the word so much, you then start using it at work. Eventually, Justin Bieber uses the word in a song, at which point the word&#8217;s popularity really starts to explode.</p>

<p>So how does information propagate through a social network? What types of people does an answer on Quora reach, and how does it reach them? (Do users discover new answers individually, or are hubs of connectors more key?) How does the activity of a post on Quora rise and fall? (Submissions on other sites have limited lifetimes, fading into obscurity soon after an initial spike; how does that change when users are connected and every upvote can revive a post for someone else&#8217;s eyes?)</p>

<p>(I looked at Quora since I had some data from there already available, but I hope the lessons should be fairly applicable in general, to other social networks like Facebook, Twitter, and LinkedIn as well.)</p>

<p>To give an initial answer to some of these questions, I dug into one of my more popular posts, on <a href="http://www.quora.com/Random-Forests/How-do-random-forests-work-in-laymans-terms">a layman&#8217;s introduction to random forests</a>.</p>

<h1>Users, Topics</h1>

<p>Before looking deeper into the voting dynamics of the post, let&#8217;s first get some background on what kinds of users the answer reached.</p>

<p>Here&#8217;s a graph of the topics that question upvoters follow. (Each node is a topic, and every time upvoter X follows both topics A and B, I add an edge between A and B.)</p>

<p><a href="http://dl.dropbox.com/u/10506/blog/social-network-transmission/rf-upvoter-topics-unlabeled.png"><img src="http://dl.dropbox.com/u/10506/blog/social-network-transmission/rf-upvoter-topics-unlabeled.png" alt="Upvoters' Topics - Unlabeled" /></a></p>

<p><a href="http://dl.dropbox.com/u/10506/blog/social-network-transmission/rf-upvoter-topics-labeled.png"><img src="http://dl.dropbox.com/u/10506/blog/social-network-transmission/rf-upvoter-topics-labeled.png" alt="Upvoters' Topics - Labeled" /></a></p>

<p>We can see from the graph that upvoters tend to be interested in three kinds of topics:</p>

<ul>
<li><strong>Machine learning and other technical matters</strong> (the green cluster): Classification, Data Mining, Big Data, Information Retrieval, Analytics, Probability, Support Vector Machines, R, Data Science, &#8230;</li>
<li><strong>Startups/Silicon Valley</strong> (the red cluster): Facebook, Lean Startups, Investing, Seed Funding, Angel Investing, Technology Trends, Product Managment, Silicon Valley Mergers and Acquisitions, Asana, Social Games, Quora, Mark Zuckerberg, User Experience, Founders and Entrepreneurs, &#8230;</li>
<li><strong>General Intellectual Topics</strong> (the purple cluster): TED, Science, Book Recommendations, Philosophy, Politics, Self-Improvement, Travel, Life Hacks, &#8230;</li>
</ul>


<p>Also, here&#8217;s the network of the upvoters themselves (there&#8217;s an edge between users A and B if A follows B):</p>

<p><a href="http://dl.dropbox.com/u/10506/blog/social-network-transmission/rf-upvoters-unlabeled.png"><img src="http://dl.dropbox.com/u/10506/blog/social-network-transmission/rf-upvoters-unlabeled.png" alt="Upvote Network - Unlabeled" /></a></p>

<p><a href="http://dl.dropbox.com/u/10506/blog/social-network-transmission/rf-upvoters-labeled.png"><img src="http://dl.dropbox.com/u/10506/blog/social-network-transmission/rf-upvoters-labeled.png" alt="Upvote Network - Labeled" /></a></p>

<p>We can see three main clusters of users:</p>

<ul>
<li>A large group in <strong>green</strong> centered around a lot of power users and Quora employees.</li>
<li>A machine learning group of folks in <strong>orange</strong> centered around people like Oliver Grisel, Christian Langreiter, and Joseph Turian.</li>
<li>A group of people following me, in <strong>purple</strong>.</li>
<li>Plus some smaller clusters in blue and yellow. (There were also a bunch of isolated users, connected to no one, that I filtered out of the picture.)</li>
</ul>


<p>Digging into how these topic and user graphs are related:</p>

<ul>
<li>The orange cluster of users is more heavily into machine learning: 79% of users in that cluster follow more green topics (machine learning and technical topics) than red and purple topics (startups and general intellectual matters).</li>
<li>The green cluster of users is reversed: 77% of users follow more of the red and purple clusters of topics (on startups and general intellectual matters) than machine learning and technical topics.</li>
</ul>


<p>More interestingly, though, we can ask: how do the connections between upvoters relate to the way the post spread?</p>

<h1>Social Voting Dynamics</h1>

<p>So let&#8217;s take a look. Here&#8217;s a visualization I made of upvotes on my answer across time (click <a href="http://www.youtube.com/watch?v=cZ4Ntg4jQHw">here</a> for a larger view).</p>

<iframe width="640" height="510" src="http://www.youtube.com/embed/cZ4Ntg4jQHw " frameborder="0" allowfullscreen></iframe>


<p></p>

<p>To represent the social dynamics of these upvotes, I drew an edge from user A to user B if user A transmitted the post to user B through an upvote. (Specifically, I drew an edge from Alice to Bob if Bob follows Alice and Bob&#8217;s upvote appeared within five days of Alice&#8217;s upvote; this is meant to simulate the idea that Alice was the key intermediary between my post and Bob.)</p>

<p>Also,</p>

<ul>
<li>Green nodes are users with at least one upvote edge.</li>
<li>Blue nodes are users who follow at least one of the topics the post is categorized under (i.e., users who probably discovered the answer by themselves).</li>
<li>Red nodes are users with no connections and who do not follow any of the post&#8217;s topics (i.e, users whose path to the post remain mysterious).</li>
<li>Users increase in size when they produce more connections.</li>
</ul>


<p>Here&#8217;s a play-by-play of the video:</p>

<ul>
<li>On Feb 14 (the day I wrote the answer), there&#8217;s a flurry of activity.</li>
<li>A couple of days later, Tracy Chou gives an upvote, leading to another spike in activity.</li>
<li>Then all&#8217;s quiet until&#8230; bam! Alex Kamil leads to a surge of upvotes, and his upvote finds Ludi Rehak, who starts a small surge of her own. They&#8217;re quickly followed by Christian Langreiter, who starts a small revolution among a bunch of machine learning folks a couple days later.</li>
<li>Then all is pretty calm again, until a couple months later when&#8230; bam! Aditya Sengupta brings in a smashing of his own followers, and his upvote makes its way to Marc Bodnick, who sets off a veritable storm of activity.</li>
</ul>


<p>(Already we can see some relationships between the graph of user connections and the way the post propagated. Many of the users from the orange cluster, for example, come from Alex Kamil and Christian Langreiter&#8217;s upvotes, and many of the users from the green cluster come from Aditya Sengupta and Marc Bodnick&#8217;s upvotes. What&#8217;s interesting, though, is, why didn&#8217;t the cluster of green users appear all at once, like the orange cluster did? People like Kah Seng Tay, Tracy Chou, Venkatesh Rao, and Chad Little upvoted the answer pretty early on, but it wasn&#8217;t until Aditya Sengupta&#8217;s upvote a couple months later that people like Marc Bodnick, Edmond Lau, and many of the other green users (who do indeed follow that first set of folks) discovered the answer. Did the post simply get lost in users&#8217; feeds the first time around? Was the post perhaps ignored until it received enough upvotes to be considered worth reading? Are some users&#8217; upvotes just trusted more than others&#8217;?)</p>

<p>For another view of the upvote dynamics, here&#8217;s a static visualization, where we can again easily see the clusters of activity:</p>

<p><a href="http://dl.dropbox.com/u/10506/blog/social-network-transmission/upvote-clusters-labeled-v2.png"><img src="http://dl.dropbox.com/u/10506/blog/social-network-transmission/upvote-clusters-labeled-v2.png" alt="Upvote Temporal Clusters" /></a></p>

<h1>Fin</h1>

<p>There are still many questions it would be interesting to look at; for example,</p>

<ul>
<li>What differentiates users who sparked spikes of activity from users who didn&#8217;t? I don&#8217;t believe it&#8217;s simply number of followers, as many well-connected upvoters did <em>not</em> lead to cascades of shares. Does authority matter?</li>
<li>How far can a post reach? Clearly, the post reached people more than one degree of separation away from me (where one degree of separation is a follower); what does the distribution of degrees look like? Is there any relationship between degree of separation and time of upvote?</li>
<li>What can we say about the people who started following me after reading my answer? Are they fewer degrees of separation away? Are they more interested in machine learning? Have they upvoted any of my answers before? (Perhaps there&#8217;s a certain &#8220;threshold&#8221; of interestingness people need to overflow before they&#8217;re considered acceptable followees.)</li>
</ul>


<p>But to summarize a bit what we&#8217;ve seen so far, here are some statistics on the role the social graph played in spreading the post:</p>

<ul>
<li>There are 5 clusters of activity after the initial post, sparked both by power users and less-connected folks. In an interesting cascade of information, some of these sparks led to further spikes in activity as well (as when Aditya Sengupta&#8217;s upvote found its way to Marc Bodnick, who set off even more activity).</li>
<li>35% of users made their way to my answer because of someone else&#8217;s upvote.</li>
<li>Through these connections, the post reached a fair variety of users: 32% of upvoters don&#8217;t even follow any of the post&#8217;s topics.</li>
<li>77% of upvotes came from users over two weeks <em>after</em> my answer appeared.</li>
<li>If we look only at the upvoters who follow at least one of the post&#8217;s topics, 33% didn&#8217;t see my answer until someone else showed it to them. In other words, a full one-third of people who presumably would have been interested in my post anyways only found it because of their social network.</li>
</ul>


<p>So it looks like the social graph played quite a large part in the post&#8217;s propagation, and I&#8217;ll end with a big shoutout to Stormy Shippy, who provided an awesome set of scripts I used to collect a lot of this data.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introduction to Latent Dirichlet Allocation]]></title>
    <link href="http://echen.github.com/blog/2011/08/22/introduction-to-latent-dirichlet-allocation/"/>
    <updated>2011-08-22T10:50:49-07:00</updated>
    <id>http://echen.github.com/blog/2011/08/22/introduction-to-latent-dirichlet-allocation</id>
    <content type="html"><![CDATA[<h1>Introduction</h1>

<p>Suppose you have the following set of sentences:</p>

<ul>
<li>I like to eat broccoli and bananas.</li>
<li>I ate a banana and spinach smoothie for breakfast.</li>
<li>Chinchillas and kittens are cute.</li>
<li>My sister adopted a kitten yesterday.</li>
<li>Look at this cute hamster munching on a piece of broccoli.</li>
</ul>


<p>What is latent Dirichlet allocation? It&#8217;s a way of automatically discovering <strong>topics</strong> that these sentences contain. For example, given these sentences and asked for 2 topics, LDA might produce something like</p>

<ul>
<li><strong>Sentences 1 and 2</strong>: 100% Topic A</li>
<li><strong>Sentences 3 and 4</strong>: 100% Topic B</li>
<li><strong>Sentence 5</strong>: 60% Topic A, 40% Topic B</li>
<li><strong>Topic A</strong>: 30% broccoli, 15% bananas, 10% breakfast, 10% munching, &#8230; (at which point, you could interpret topic A to be about food)</li>
<li><strong>Topic B</strong>: 20% chinchillas, 20% kittens, 20% cute, 15% hamster, &#8230; (at which point, you could interpret topic B to be about cute animals)</li>
</ul>


<p>The question, of course, is: how does LDA perform this discovery?</p>

<h1>LDA Model</h1>

<p>In more detail, LDA represents documents as <strong>mixtures of topics</strong> that spit out words with certain probabilities. It assumes that documents are produced in the following fashion: when writing each document, you</p>

<ul>
<li>Decide on the number of words N the document will have (say, according to a Poisson distribution).</li>
<li>Choose a topic mixture for the document (according to a Dirichlet distribution over a fixed set of K topics). For example, assuming that we have the two food and cute animal topics above, you might choose the document to consist of 1/3 food and 2/3 cute animals.</li>
<li>Generate each word w_i in the document by:

<ul>
<li>First picking a topic (according to the multinomial distribution that you sampled above; for example, you might pick the food topic with 1/3 probability and the cute animals topic with 2/3 probability).</li>
<li>Using the topic to generate the word itself (according to the topic&#8217;s multinomial distribution). For example, if we selected the food topic, we might generate the word &#8220;broccoli&#8221; with 30% probability, &#8220;bananas&#8221; with 15% probability, and so on.</li>
</ul>
</li>
</ul>


<p>Assuming this generative model for a collection of documents, LDA then tries to backtrack from the documents to find a set of topics that are likely to have generated the collection.</p>

<h2>Example</h2>

<p>Let&#8217;s make an example. According to the above process, when generating some particular document D, you might</p>

<ul>
<li>Pick 5 to be the number of words in D.</li>
<li>Decide that D will be 1/2 about food and 1/2 about cute animals.</li>
<li>Pick the first word to come from the food topic, which then gives you the word &#8220;broccoli&#8221;.</li>
<li>Pick the second word to come from the cute animals topic, which gives you &#8220;panda&#8221;.</li>
<li>Pick the third word to come from the cute animals topic, giving you &#8220;adorable&#8221;.</li>
<li>Pick the fourth word to come from the food topic, giving you &#8220;cherries&#8221;.</li>
<li>Pick the fifth word to come from the food topic, giving you &#8220;eating&#8221;.</li>
</ul>


<p>So the document generated under the LDA model will be &#8220;broccoli panda adorable cherries eating&#8221; (note that LDA is a bag-of-words model).</p>

<h1>Learning</h1>

<p>So now suppose you have a set of documents. You&#8217;ve chosen some fixed number of K topics to discover, and want to use LDA to learn the topic representation of each document and the words associated to each topic. How do you do this? One way (known as collapsed Gibbs sampling) is the following:</p>

<ul>
<li>Go through each document, and randomly assign each word in the document to one of the K topics.</li>
<li>Notice that this random assignment already gives you both topic representations of all the documents and word distributions of all the topics (albeit not very good ones).</li>
<li>So to improve on them, for each document d&#8230;

<ul>
<li>Go through each word w in d&#8230;

<ul>
<li>And for each topic t, compute two things: 1) p(topic t | document d) = the proportion of words in document d that are currently assigned to topic t, and 2) p(word w | topic t) = the proportion of assignments to topic t over all documents that come from this word w. Reassign w a new topic, where we choose topic t with probability p(topic t | document d) * p(word w | topic t) (according to our generative model, this is essentially the probability that topic t generated word w, so it makes sense that we resample the current word&#8217;s topic with this probability). (Also, I&#8217;m glossing over a couple of things here, in particular the use of priors/pseudocounts in these probabilities.)</li>
<li>In other words, in this step, we&#8217;re assuming that all topic assignments except for the current word in question are correct, and then updating the assignment of the current word using our model of how documents are generated.</li>
</ul>
</li>
</ul>
</li>
<li>After repeating the previous step a large number of times, you&#8217;ll eventually reach a roughly steady state where your assignments are pretty good. So use these assignments to estimate the topic mixtures of each document (by counting the proportion of words assigned to each topic within that document) and the words associated to each topic (by counting the proportion of words assigned to each topic overall).</li>
</ul>


<h1>Layman&#8217;s Explanation</h1>

<p>In case the discussion above was a little eye-glazing, here&#8217;s another way to look at LDA in a different domain.</p>

<p>Suppose you&#8217;ve just moved to a new city. You&#8217;re a hipster and an anime fan, so you want to know where the other hipsters and anime geeks tend to hang out. Of course, as a hipster, you know you can&#8217;t just <em>ask</em>, so what do you do?</p>

<p>Here&#8217;s the scenario: you scope out a bunch of different establishments (<strong>documents</strong>) across town, making note of the people (<strong>words</strong>) hanging out in each of them (e.g., Alice hangs out at the mall and at the park, Bob hangs out at the movie theater and the park, and so on). Crucially, you don&#8217;t know the typical interest groups (<strong>topics</strong>) of each establishment, nor do you know the different interests of each person.</p>

<p>So you pick some number K of categories to learn (i.e., you want to learn the K most important kinds of categories people fall into), and start by making a guess as to why you see people where you do. For example, you initially guess that Alice is at the mall because people with interests in X like to hang out there; when you see her at the park, you guess it&#8217;s because her friends with interests in Y like to hang out there; when you see Bob at the movie theater, you randomly guess it&#8217;s because the Z people in this city really like to watch movies; and so on.</p>

<p>Of course, your random guesses are very likely to be incorrect (they&#8217;re random guesses, after all!), so you want to improve on them. One way of doing so is to:</p>

<ul>
<li>Pick a place and a person (e.g., Alice at the mall).</li>
<li>Why is Alice likely to be at the mall? Probably because other people at the mall with the same interests sent her a message telling her to come.</li>
<li>In other words, the more people with interests in X there are at the mall and the stronger Alice is associated with interest X (at all the other places she goes to), the more likely it is that Alice is at the mall because of interest X.</li>
<li>So make a new guess as to why Alice is at the mall, choosing an interest with some probability according to how likely you think it is.</li>
</ul>


<p>Go through each place and person over and over again. Your guesses keep getting better and better (after all, if you notice that lots of geeks hang out at the bookstore, and you suspect that Alice is pretty geeky herself, then it&#8217;s a good bet that Alice is at the bookstore because her geek friends told her to go there; and now that you have a better idea of why Alice is probably at the bookstore, you can use this knowledge in turn to improve your guesses as to why everyone else is where they are), and eventually you can stop updating. Then take a snapshot (or multiple snapshots) of your guesses, and use it to get all the information you want:</p>

<ul>
<li>For each category, you can count the people assigned to that category to figure out what people have this particular interest. By looking at the people themselves, you can interpret the category as well (e.g., if category X contains lots of tall people wearing jerseys and carrying around basketballs, you might interpret X as the &#8220;basketball players&#8221; group).</li>
<li>For each place P and interest category C, you can compute the proportions of people at P because of C (under the current set of assignments), and these give you a representation of P. For example, you might learn that the people who hang out at Barnes &amp; Noble consist of 10% hipsters, 50% anime fans, 10% jocks, and 30% college students.</li>
</ul>


<h1>Real-World Example</h1>

<p>Finally, I applied LDA to a set of Sarah Palin&#8217;s emails a little while ago (see <a href="http://blog.echen.me/2011/06/27/topic-modeling-the-sarah-palin-emails/">here</a> for the blog post, or <a href="http://sarah-palin.heroku.com/">here</a> for an app that allows you to browse through the emails by the LDA-learned categories), so let&#8217;s give a brief recap. Here are some of the topics that the algorithm learned:</p>

<ul>
<li><strong>Trig/Family/Inspiration</strong>: family, web, mail, god, son, from, congratulations, children, life, child, down, trig, baby, birth, love, you, syndrome, very, special, bless, old, husband, years, thank, best, &#8230;</li>
<li><strong>Wildlife/BP Corrosion</strong>: game, fish, moose, wildlife, hunting, bears, polar, bear, subsistence, management, area, board, hunt, wolves, control, department, year, use, wolf, habitat, hunters, caribou, program, denby, fishing, &#8230;</li>
<li><strong>Energy/Fuel/Oil/Mining:</strong> energy, fuel, costs, oil, alaskans, prices, cost, nome, now, high, being, home, public, power, mine, crisis, price, resource, need, community, fairbanks, rebate, use, mining, villages, &#8230;</li>
<li><strong>Gas</strong>: gas, oil, pipeline, agia, project, natural, north, producers, companies, tax, company, energy, development, slope, production, resources, line, gasline, transcanada, said, billion, plan, administration, million, industry, &#8230;</li>
<li><strong>Education/Waste</strong>: school, waste, education, students, schools, million, read, email, market, policy, student, year, high, news, states, program, first, report, business, management, bulletin, information, reports, 2008, quarter, &#8230;</li>
<li><strong>Presidential Campaign/Elections</strong>: mail, web, from, thank, you, box, mccain, sarah, very, good, great, john, hope, president, sincerely, wasilla, work, keep, make, add, family, republican, support, doing, p.o, &#8230;</li>
</ul>


<p>Here&#8217;s an example of an email which fell 99% into the Trig/Family/Inspiration category (particularly representative words are highlighted in blue):</p>

<p><a href="http://dl.dropbox.com/u/10506/blog/palin-browser/trig-email.png"><img src="http://dl.dropbox.com/u/10506/blog/palin-browser/trig-email.png" alt="Trig Email" /></a></p>

<p>And here&#8217;s an excerpt from an email which fell 10% into the Presidential Campaign/Election category (in red) and 90% into the Wildlife/BP Corrosion category (in green):</p>

<p><a href="http://dl.dropbox.com/u/10506/blog/palin-browser/wildlife-presidency-email.png"><img src="http://dl.dropbox.com/u/10506/blog/palin-browser/wildlife-presidency-email.png" alt="Wildlife-Presidency Email" /></a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tweets vs. Likes: What gets shared on Twitter vs. Facebook?]]></title>
    <link href="http://echen.github.com/blog/2011/07/28/tweets-vs-likes-what-gets-shared-on-twitter-vs-facebook/"/>
    <updated>2011-07-28T07:55:29-07:00</updated>
    <id>http://echen.github.com/blog/2011/07/28/tweets-vs-likes-what-gets-shared-on-twitter-vs-facebook</id>
    <content type="html"><![CDATA[<p>It always strikes me as curious that some posts get a lot of love on Twitter, while others get many more shares on Facebook:</p>

<p><a href="http://dl.dropbox.com/u/10506/blog/likes-vs-tweets/twitter-beats-fb.png"><img src="http://dl.dropbox.com/u/10506/blog/likes-vs-tweets/twitter-beats-fb.png" alt="Twitter Beats FB" /></a></p>

<p><a href="http://dl.dropbox.com/u/10506/blog/likes-vs-tweets/fb-beats-twitter.png"><img src="http://dl.dropbox.com/u/10506/blog/likes-vs-tweets/fb-beats-twitter.png" alt="FB Beats Twitter" /></a></p>

<p>What accounts for this difference? Some of it is surely site-dependent: maybe one blogger has a Facebook page but not a Twitter account, while another has these roles reversed. But even on sites maintained by a single author, tweet-to-likes ratios can vary widely from post to post.</p>

<p>So what kinds of articles tend to be more popular on Twitter, and which spread more easily on Facebook? To take a stab at an answer, I scraped data from a couple of websites over the weekend.</p>

<p><strong>tl;dr</strong> Twitter is still for the <em>techies</em>: articles where the number of tweets greatly outnumber FB likes tend to revolve around software companies and programming. Facebook, on the other hand, appeals to <em>everyone else</em>: yeah, to the masses, and to non-software technical folks in general as well.</p>

<h1>FlowingData</h1>

<p>The first site I looked at was Nathan Yau&#8217;s awesome <a href="http://www.flowingdata.com">FlowingData</a> website on data visualization. To see which articles are more popular on Facebook and which are more popular on Twitter, let&#8217;s sort all the FlowingData articles by their # tweets / # likes ratio.</p>

<p>Here are the 10 posts with the lowest tweets-to-likes ratio (i.e., the posts that were especially popular with Facebook users):</p>

<p><a href="http://dl.dropbox.com/u/10506/blog/likes-vs-tweets/flowingdata-facebook2.png"><img src="http://dl.dropbox.com/u/10506/blog/likes-vs-tweets/flowingdata-facebook2-small.png" alt="FlowingData Facebook" /></a></p>

<ul>
<li><a href="http://flowingdata.com/2011/01/30/what-your-state-is-the-worst-at-united-states-of-shame/">What your state is the worst at – United States of shame</a></li>
<li><a href="http://flowingdata.com/2011/05/13/plush-statistical-distribution-pillows/">Plush statistical distribution pillows</a></li>
<li><a href="http://flowingdata.com/2011/03/22/are-gas-prices-really-that-high/">Are gas prices really that high?</a></li>
<li><a href="http://flowingdata.com/2011/01/21/hey-jude-flowchart/">Hey Jude flowchart</a></li>
<li><a href="http://flowingdata.com/2011/04/28/womens-dress-sizes-demystified/">Women’s dress sizes demystified</a></li>
<li><a href="http://flowingdata.com/2011/02/22/america-is-not-the-best-at-everything/">America is not the best at everything</a></li>
<li><a href="http://flowingdata.com/2011/06/10/what-you-need-to-get-together/">What you need to get together</a></li>
<li><a href="http://flowingdata.com/2011/01/27/dexters-victims-through-season-five/">Dexter’s victims through season five</a></li>
<li><a href="http://flowingdata.com/2011/05/06/correlating-dog/">Correlating dog</a></li>
<li><a href="http://flowingdata.com/2011/02/14/valentines-day-importance/">Valentine’s Day importance</a></li>
</ul>


<p>And here are the 10 posts with the highest tweets-to-like ratio (i.e., the posts especially popular with Twitter users):</p>

<p><a href="http://dl.dropbox.com/u/10506/blog/likes-vs-tweets/flowingdata-twitter.png"><img src="http://dl.dropbox.com/u/10506/blog/likes-vs-tweets/flowingdata-twitter-small.png" alt="FlowingData Twitter" /></a></p>

<ul>
<li><a href="http://flowingdata.com/2011/01/04/delicious-mass-exodus/">Delicious mass exodus</a></li>
<li><a href="http://flowingdata.com/2011/05/25/pew-research-raw-survey-data-now-available/">Pew Research raw survey data now available</a></li>
<li><a href="http://flowingdata.com/2011/02/03/stock-market-predictions-with-twitter/">Stock market predictions with Twitter</a></li>
<li><a href="http://flowingdata.com/2011/01/25/growth-and-usage-of-foursquare-in-2010/">Growth and usage of foursquare in 2010</a></li>
<li><a href="http://flowingdata.com/2011/02/17/sunlight-labs-opens-up-real-time-congress-api/">Sunlight Labs opens up Real Time Congress API</a></li>
<li><a href="http://flowingdata.com/2011/03/25/open-source-data-science-toolkit/">Open-source Data Science Toolkit</a></li>
<li><a href="http://flowingdata.com/2011/01/24/explore-your-linkedin-network-visually-with-inmaps/">Explore your LinkedIn network visually with InMaps</a></li>
<li><a href="http://flowingdata.com/2011/05/03/perceived-vs-actual-country-rankings/">Perceived vs. actual country rankings</a></li>
<li><a href="http://flowingdata.com/2011/04/20/see-what-you-and-others-tweet-about-with-the-topic-explorer/">See what you and others tweet about with the Topic Explorer</a></li>
<li><a href="http://flowingdata.com/2011/04/24/history-of-detainees-at-guantnamo/">History of detainees at Guantánamo</a></li>
</ul>


<p>Notice any differences between the two?</p>

<ul>
<li>Instant gratification infographics, cuteness, comics, and pop culture get liked on Facebook.</li>
<li>APIs, datasets, visualizations related to techie sites (Delicious, foursquare, Twitter, LinkedIn), and picture-less articles get tweeted instead.</li>
</ul>


<p>Interestingly, it also looks like the colors in the top 10 Facebook articles tend to the red end of the spectrum, while the colors in the top 10 Twitter articles tend to the blue end of the spectrum. Does this pattern hold if we look at more data? Here&#8217;s a meta-visualization of the FlowingData articles, sorted by articles popular on Facebook in the top left to articles popular on Twitter in the bottom right (see <a href="http://flowingdata-melted.heroku.com/">here</a> for some interactivity and more details):</p>

<p><a href="http://flowingdata-melted.heroku.com/"><img src="http://dl.dropbox.com/u/10506/blog/flowingdata-metaviz/flowingdata-metaviz.png" alt="FlowingData MetaViz" /></a></p>

<p>It does indeed look like the images at the top (the articles popular on Facebook) are more pink, while the images at the bottom (the articles popular on Twitter) are more blue (though it would be nice to quantify this in some way)!</p>

<p>Furthermore, we can easily see from the grid that articles with no visualizations (represented by lorem ipsum text in the grid) cluster at the bottom. Grabbing some actual numbers, we find that 32% of articles with at least one picture have more shares on Facebook than on Twitter, compared to only 4% of articles with no picture at all.</p>

<p><a href="http://dl.dropbox.com/u/10506/blog/likes-vs-tweets/flowingdata-viz-effect.png"><img src="http://dl.dropbox.com/u/10506/blog/likes-vs-tweets/flowingdata-viz-effect.png" alt="Effect of a visualization" /></a></p>

<p>Finally, let&#8217;s break down the percentage of articles with more Facebook shares by category.</p>

<p><a href="http://dl.dropbox.com/u/10506/blog/likes-vs-tweets/flowingdata-categories.png"><img src="http://dl.dropbox.com/u/10506/blog/likes-vs-tweets/flowingdata-categories.png" alt="FlowingData Categories" /></a></p>

<p>(I filtered the categories so that each category in the plot above contains at least 5 articles.)</p>

<p>What do we find?</p>

<ul>
<li>Articles in the Software, Online Applications, News, and Data sources categories (yawn) get 100% of their shares from Twitter.</li>
<li>Articles tagged with <a href="http://flowingdata.com/category/projects/data-underload/">Data Underload</a> (which seems to contain short and sweet visualizations of everyday things), <a href="http://flowingdata.com/category/miscellaneous-data/">Miscellaneous</a> (which contains lots of comics or comic-like visualizations), and <a href="http://flowingdata.com/category/visualization/infographics/">Infographics</a> get the most shares on Facebook.</li>
<li>This category breakdown matches precisely what we saw in the top 10 examples above.</li>
</ul>


<h1>New Scientist</h1>

<p>When looking at FlowingData, we saw that Twitter users are much bigger on sharing technical articles. But is this true for technical articles in general, or only for programming-related posts? (In my experience with Twitter, I haven&#8217;t seen many people from math and the non-computer sciences.)</p>

<p>To answer, I took articles from the <a href="http://www.newscientist.com/search?rbsection1=Physics+%26+Math&amp;sortby=rbpubdate">Physics &amp; Math</a> and <a href="http://www.newscientist.com/search?rbsection1=tech&amp;sortby=rbpubdate">Technology</a> sections of <a href="http://www.newscientist.com">New Scientist</a>, and</p>

<ul>
<li>Calculated the percentage of shares each article received on Twitter (i.e., # tweets / (# tweets + # likes)).</li>
<li>Grouped articles by their number of tweets rounded to the nearest multiple of 25 (bin #1 contains articles close to 25 tweets, bin #2 contains articles close to 50 tweets, etc.).</li>
<li>Calculated the median percentage of shares on Twitter for each bin.</li>
</ul>


<p>Here&#8217;s a graph of the result:</p>

<p><a href="http://dl.dropbox.com/u/10506/blog/likes-vs-tweets/tech_vs_physicsmath.png"><img src="http://dl.dropbox.com/u/10506/blog/likes-vs-tweets/tech_vs_physicsmath.png" alt="Technology vs. Physics &amp; Math" /></a></p>

<p>Notice that:</p>

<ul>
<li>The technology articles get consistently more shares from Twitter than the physics and math articles do.</li>
<li>Twitter accounts for the majority of the technology shares.</li>
<li>Facebook accounts for the majority of the physics and math shares.</li>
</ul>


<p>So this suggests that Twitter really is for computer technology in particular, not technical matters in general (though it would be nice to look at areas other than physics and math as well).</p>

<h1>Quora</h1>

<p>To get some additional evidence on the computer science vs. math/physics divide, I</p>

<ul>
<li>Scraped about 350 profiles of followers from each of the Computer Science, Software Engineering, Mathematics, and Physics categories on Quora;</li>
<li>Checked each user to see whether they link to their Facebook and Twitter accounts on their profile.</li>
</ul>


<p>Here&#8217;s the ratio of the number of people linking to their Facebook account to the number of people linking to their Twitter account, sliced by topic:</p>

<p><a href="http://dl.dropbox.com/u/10506/blog/likes-vs-tweets/math-physics-vs-cs-software.png"><img src="http://dl.dropbox.com/u/10506/blog/likes-vs-tweets/math-physics-vs-cs-software.png" alt="Math/Physics vs. CS/Software" /></a></p>

<p><a href="http://dl.dropbox.com/u/10506/blog/likes-vs-tweets/math-physics-vs-cs-software-collapsed.png"><img src="http://dl.dropbox.com/u/10506/blog/likes-vs-tweets/math-physics-vs-cs-software-collapsed.png" alt="Math/Physics vs. CS/Software, Collapsed" /></a></p>

<p>We find exactly what we expect from the New Scientist data: people following the math and physics categories have noticeably smaller Twitter / Facebook ratios compared to people following the computer science and software engineering categories (i.e., compared to computer scientists and software engineers, mathematicians and physicists are more likely to be on Facebook than on Twitter). What&#8217;s more, this difference is in fact significant: the graphs display individual 90% confidence intervals (which overlap not at all or only slightly), and we do indeed get significance at the 95% level if we look at the differences between categories.</p>

<p>This corroborates the New Scientist evidence that Twitter gets the computer technology shares, while Facebook gets the math and physics shares.</p>

<h1>XKCD</h1>

<p>Finally, let&#8217;s take a look at which XKCD comics are especially popular on Facebook vs. Twitter.</p>

<p>Here are the 10 comics with the highest likes-to-tweets ratio (i.e., the comics especially popular on Facebook):</p>

<p><a href="http://dl.dropbox.com/u/10506/blog/likes-vs-tweets/xkcd-facebook.png"><img src="http://dl.dropbox.com/u/10506/blog/likes-vs-tweets/xkcd-facebook-small.png" alt="XKCD Facebook" /></a></p>

<ul>
<li><a href="http://xkcd.com/846/">Dental Nerve</a></li>
<li><a href="http://xkcd.com/861/">Wisdom Teeth</a></li>
<li><a href="http://xkcd.com/876/">Trapped</a></li>
<li><a href="http://xkcd.com/849/">Complex Conjugate</a></li>
<li><a href="http://xkcd.com/854/">Learning to Cook</a></li>
<li><a href="http://xkcd.com/840/">Serious</a></li>
<li><a href="http://xkcd.com/839/">Explorers</a></li>
<li><a href="http://xkcd.com/815/">Mu</a></li>
<li><a href="http://xkcd.com/809/">Los Alamos</a></li>
<li><a href="http://xkcd.com/911/">Magic School Bus</a></li>
</ul>


<p>Here are the 10 comics with the highest tweets-to-likes ratio (i.e., the comics especially popular on Twitter):</p>

<p><a href="http://dl.dropbox.com/u/10506/blog/likes-vs-tweets/xkcd-twitter.png"><img src="http://dl.dropbox.com/u/10506/blog/likes-vs-tweets/xkcd-twitter-small.png" alt="XKCD Twitter" /></a></p>

<ul>
<li><a href="http://xkcd.com/869/">Server Attention Span</a></li>
<li><a href="http://xkcd.com/818/">Illness</a></li>
<li><a href="http://xkcd.com/865/">Nanobots</a></li>
<li><a href="http://xkcd.com/912/">Manual Override</a></li>
<li><a href="http://xkcd.com/908/">The Cloud</a></li>
<li><a href="http://xkcd.com/810/">Constructive</a></li>
<li><a href="http://xkcd.com/887/">Future Timeline</a></li>
<li><a href="http://xkcd.com/844/">Good Code</a></li>
<li><a href="http://xkcd.com/801/">Golden Hammer</a></li>
<li><a href="http://xkcd.com/906/">Advertising Discovery</a></li>
<li><a href="http://xkcd.com/802/">Online Communities 2</a></li>
</ul>


<p>Note that the XKCD comics popular on Facebook have more of a layman flavor, while the XKCD comics popular on Twitter are much more programming-related:</p>

<ul>
<li>Of the XKCD comics popular on Twitter, one&#8217;s about server attention spans, another&#8217;s about IPv6 addresses, a third is about GNU info pages, another deals with cloud computing, a fifth talks about Java, and the last is about a bunch of techie sites. (This is just like what we saw with the FlowingData visualizations.)</li>
<li>Facebook, on the other hand, gets Ke$ha and Magic School Bus.</li>
<li>And while both top 10&#8217;s contain a flowchart, the one popular on FB is about <em>cooking</em>, while the one popular on Twitter is about <em>code</em>!</li>
<li>What&#8217;s more, if we look at the few technical-ish comics that are more popular on Facebook (the complex conjugate, mu, and Los Alamos comics), we see that they&#8217;re about physics and math, not programming (which matches our findings from the New Scientist articles).</li>
</ul>


<h1>Lesson</h1>

<p>So why should you care? Here&#8217;s one takeaway:</p>

<ul>
<li>If you&#8217;re blogging about technology, programming, and computer science, Twitter is your friend.</li>
<li>But if you&#8217;re blogging about anything else, be it math/physics or pop culture, don&#8217;t rely on a Twitter account alone; your shares are more likely to propagate on Facebook, so make sure to have a Facebook page as well.</li>
</ul>


<h1>What&#8217;s Next?</h1>

<p>The three websites I looked at are all fairly tech-oriented, so it would be nice to gather data from other kinds of websites as well.</p>

<p>And now that we have an idea how Twitter and Facebook compare, the next burning question is surely: <a href="http://finalbossform.com/post/7214184180/google-is-fast-becoming-the-leading-social">what do people share on Google+?!</a></p>

<h1>Addendum</h1>

<p>Let&#8217;s consider the following thought experiment. Suppose you come across the most unpopular article ever written. What will its FB vs. Twitter shares look like? Although no <em>real</em> person will ever share this article, I think Twitter has many more spambots (who tweet out any and every link) than FB does, so maybe unpopular articles will have more tweets than likes by default. Conversely, suppose you come across the most popular article ever written, which everybody wants to share. Then since FB has many more users than Twitter does, maybe popular articles will tend to have more likes than tweets anyways.</p>

<p>Thus, in order to find out which types of articles are <em>especially</em> popular on FB vs. Twitter, instead of looking at tweets-to-likes ratios directly, we could try to remove this baseline popularity effect. (Taking ratios instead of raw number of tweets or raw number of likes is one kind of normalization; this is another.)</p>

<p>So does this scenario (or something similar to it) actually play out in practice?</p>

<p><a href="http://dl.dropbox.com/u/10506/blog/likes-vs-tweets/flowingdata-overall-popularity-vs-fb.png"><img src="http://dl.dropbox.com/u/10506/blog/likes-vs-tweets/flowingdata-overall-popularity-vs-fb.png" alt="Overall Popularity vs. Facebook" /></a></p>

<p>Here I&#8217;ve plotted the overall popularity of a post (the total number of shares it received on either Twitter or FB) against the percentage of shares on Facebook alone, and we can see that as a post&#8217;s popularity grows, more and more shares do indeed tend to come from Facebook rather than Twitter.</p>

<p>Also, see the posts at the lower end of the popularity scale that are only getting shares on Twitter? Let&#8217;s take a look at the five most unpopular of these:</p>

<ul>
<li><a href="http://flowingdata.com/2011/03/31/flowingdata-is-brought-to-you-by-8/">Flowing Data is brought to you by&#8230; (March 2011 edition)</a> (11 tweets, 0 likes)</li>
<li><a href="http://flowingdata.com/2011/07/05/flowingdata-is-brought-to-you-by-11/">Flowing Data is brought to you by&#8230; (July 2011 edition)</a> (14 tweets, 0 likes)</li>
<li><a href="http://flowingdata.com/2011/06/06/flowingdata-is-brought-to-you-by-10/">Flowing Data is brought to you by&#8230; (June 2011 edition)</a> (17 tweets, 0 likes)</li>
<li><a href="http://flowingdata.com/2011/05/09/flowingdata-is-brought-to-you-by-9/">Flowing Data is brought to you by&#8230; (May 2011 edition)</a> (18 tweets, 0 likes)</li>
<li><a href="http://flowingdata.com/2011/02/28/flowingdata-is-brought-to-you-by-7/">Flowing Data is brought to you by&#8230; (May 2011 edition)</a> (12 tweets, 1 like)</li>
</ul>


<p>Notice that they&#8217;re all shoutouts to FlowingData&#8217;s sponsors! There&#8217;s pretty much no reason any <em>real</em> person would share these on Twitter or Facebook, and indeed, checking Twitter to see who actually tweeted out these links, we see that the tweeters are bots:</p>

<ul>
<li><a href="https://twitter.com/#!/myVisualization/status/77685824224894976">https://twitter.com/#!/myVisualization/status/77685824224894976</a></li>
<li><a href="https://twitter.com/#!/InfographicTwts/status/67668615142457344">https://twitter.com/#!/InfographicTwts/status/6766861514245734</a></li>
<li><a href="https://twitter.com/#!/guysgoogle/status/77644902510493696">https://twitter.com/#!/guysgoogle/status/77644902510493696</a></li>
<li><a href="https://twitter.com/#!/WhereIsYourData/status/77631743292735488">https://twitter.com/#!/WhereIsYourData/status/77631743292735488</a></li>
</ul>


<p>Now let&#8217;s switch to a slightly different view of the above scenario, where I plot number of tweets against number of likes:</p>

<p><a href="http://dl.dropbox.com/u/10506/blog/likes-vs-tweets/flowingdata-tweets-vs-likes.png"><img src="http://dl.dropbox.com/u/10506/blog/likes-vs-tweets/flowingdata-tweets-vs-likes.png" alt="FlowingData Tweets vs. Likes" /></a></p>

<p>We see that as popularity on Twitter increases, so too does popularity on Facebook &#8211; but at a slightly faster rate. (The form of the blue line plotted is roughly $\log(likes) = -3.87 + 1.70 \log(tweets)$.)</p>

<p>So instead of looking at the ratios above, to figure out which articles are popular on FB vs. Twitter, we could look at the residuals of the above plot. Posts with large positive residuals would be posts that are especially popular on FB, and posts with negative residuals would be posts that are especially popular on Twitter.</p>

<p>In practice, however, there wasn&#8217;t much difference between looking at residuals vs. ratios directly when using the datasets I had, so to keep things simple in the main discussion above, I stuck to ratios alone. Still, it&#8217;s another option which might be useful when looking at different questions or different sources of data, so just for completeness, here&#8217;s what the FlowingData results look like if we use residuals instead.</p>

<p>The 10 articles with the highest residuals (i.e., the articles most popular on Facebook):</p>

<ul>
<li><a href="http://flowingdata.com/2011/06/10/what-you-need-to-get-together/">What you need to get together</a></li>
<li><a href="http://flowingdata.com/2011/02/14/valentines-day-importance/">Valentine’s Day importance</a></li>
<li><a href="http://flowingdata.com/2011/01/30/what-your-state-is-the-worst-at-united-states-of-shame/">What your state is the worst at – United States of shame</a></li>
<li><a href="http://flowingdata.com/2011/05/13/plush-statistical-distribution-pillows/">Plush statistical distribution pillows</a></li>
<li><a href="http://flowingdata.com/2011/07/01/hitler-learns-topology/">Hitler learns topology</a></li>
<li><a href="http://flowingdata.com/2011/01/27/dexters-victims-through-season-five/">Dexter’s victims through season five</a></li>
<li><a href="http://flowingdata.com/2011/07/06/access-to-education-where-you-live/">Access to education where you live</a></li>
<li><a href="http://flowingdata.com/2011/03/09/watching-costco-warehouses-open-nationwide/">Watching the growth of Costco warehouses</a></li>
<li><a href="http://flowingdata.com/2011/03/22/are-gas-prices-really-that-high/">Are gas prices really that high?</a></li>
<li><a href="http://flowingdata.com/2011/01/21/flight-safety-esque-beer-pong-guide/">Flight safety-esque beer pong guide</a></li>
</ul>


<p>The 10 articles with the lowest residuals (i.e., the articles most popular on Twitter):</p>

<ul>
<li><a href="http://flowingdata.com/2011/05/25/pew-research-raw-survey-data-now-available/">Pew Research raw survey data now available</a></li>
<li><a href="http://flowingdata.com/2011/01/24/explore-your-linkedin-network-visually-with-inmaps/">Explore your LinkedIn network visually with InMaps</a></li>
<li><a href="http://flowingdata.com/2011/02/03/stock-market-predictions-with-twitter/">Stock market predictions with Twitter</a></li>
<li><a href="http://flowingdata.com/2011/01/04/delicious-mass-exodus/">Delicious mass exodus</a></li>
<li><a href="http://flowingdata.com/2011/03/25/open-source-data-science-toolkit/">Open-source Data Science Toolkit</a></li>
<li><a href="http://flowingdata.com/2011/04/17/business-intelligence-vs-infotainment/">Business intelligence vs. infotainment</a></li>
<li><a href="http://flowingdata.com/2011/04/20/see-what-you-and-others-tweet-about-with-the-topic-explorer/">See what you and others tweet about with the Topic Explorer</a></li>
<li><a href="http://flowingdata.com/2011/01/25/growth-and-usage-of-foursquare-in-2010/">Growth and usage of foursquare in 2010</a></li>
<li><a href="http://flowingdata.com/2011/05/10/flash-vs-html5/">Flash vs. HTML5</a></li>
<li><a href="http://flowingdata.com/2011/06/09/gender-and-time-comparisons-on-twitter/">Gender and time comparisons on Twitter</a></li>
</ul>


<p>Here&#8217;s a density plot of article residuals, split by whether the article has a visualization or not (residuals of picture-free articles are clearly shifted towards the negative end):</p>

<p><a href="http://dl.dropbox.com/u/10506/blog/likes-vs-tweets/has-viz-residuals.png"><img src="http://dl.dropbox.com/u/10506/blog/likes-vs-tweets/has-viz-residuals.png" alt="Residuals" /></a></p>

<p>Here are the mean residuals per category (again, we see that the miscellaneous, data underload, data art, and infographics categories tend to be more popular on Facebook, while the data sources, software, online applications, and news categories tend to be more popular on Twitter):</p>

<p><a href="http://dl.dropbox.com/u/10506/blog/likes-vs-tweets/category-residuals.png"><img src="http://dl.dropbox.com/u/10506/blog/likes-vs-tweets/category-residuals.png" alt="Category Residuals" /></a></p>

<p>And that&#8217;s it! In the spirit of these findings, I hope this article gets <a href="http://blog.echen.me/2011/07/28/tweets-vs-likes-what-gets-shared-on-twitter-vs-facebook/?share=facebook&amp;nb=1">liked</a> a little and <a href="https://twitter.com/share?original_referer=http%3A%2F%2Fblog.echen.me%2F2011%2F07%2F28%2Ftweets-vs-likes-what-gets-shared-on-twitter-vs-facebook%2F&amp;source=tweetbutton&amp;text=Tweets%20vs.%20Likes%3A%20What%20gets%20shared%20on%20Twitter%20vs.%20Facebook%3F%3A&amp;url=http%3A%2F%2Fwp.me%2Fpy9AS-6P">tweeted</a> lots and lots.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introduction to Restricted Boltzmann Machines]]></title>
    <link href="http://echen.github.com/blog/2011/07/18/introduction-to-restricted-boltzmann-machines/"/>
    <updated>2011-07-18T09:32:52-07:00</updated>
    <id>http://echen.github.com/blog/2011/07/18/introduction-to-restricted-boltzmann-machines</id>
    <content type="html"><![CDATA[<h1>Introduction</h1>

<p>Suppose you ask a bunch of users to rate a set of movies on a 0-100 scale. In classical <a href="http://en.wikipedia.org/wiki/Factor_analysis">factor analysis</a>, you could then try to explain each movie and user in terms of a set of latent <em>factors</em>. For example, movies like Star Wars and Lord of the Rings might have strong associations with a latent science fiction and fantasy factor, and users who like Wall-E and Toy Story might have strong associations with a latent Pixar factor.</p>

<p>Restricted Boltzmann Machines essentially perform a <em>binary</em> version of factor analysis. (This is one way of thinking about RBMs; there are, of course, others, and lots of different ways to use RBMs, but I&#8217;ll adopt this approach for this post.) Instead of users rating a set of movies on a continuous scale, they simply tell you whether they like a movie or not, and the RBM will try to discover latent factors that can explain the activation of these movie choices.</p>

<p>More technically, a Restricted Boltzmann Machine is a <strong>stochastic neural network</strong> (<em>neural network</em> meaning we have neuron-like units whose binary activations depend on the neighbors they&#8217;re connected to; <em>stochastic</em> meaning these activations have a probabilistic element) consisting of:</p>

<ul>
<li>One layer of <strong>visible units</strong> (users&#8217; movie preferences whose states we know and set);</li>
<li>One layer of <strong>hidden units</strong> (the latent factors we try to learn); and</li>
<li>A bias unit (whose state is always on, and is a way of adjusting for the different inherent popularities of each movie).</li>
</ul>


<p>Furthermore, each visible unit is connected to all the hidden units (this connection is undirected, so each hidden unit is also connected to all the visible units), and the bias unit is connected to all the visible units and all the hidden units. To make learning easier, we restrict the network so that no visible unit is connected to any other visible unit and no hidden unit is connected to any other hidden unit.</p>

<p>For example, suppose we have a set of six movies (Harry Potter, Avatar, LOTR 3, Gladiator, Titanic, and Glitter) and we ask users to tell us which ones they want to watch. If we want to learn two latent units underlying movie preferences &#8211; for example, two natural groups in our set of six movies appear to be SF/fantasy (containing Harry Potter, Avatar, and LOTR 3) and Oscar winners (containing LOTR 3, Gladiator, and Titanic), so we might hope that our latent units will correspond to these categories &#8211; then our RBM would look like the following:</p>

<p><a href="http://dl.dropbox.com/u/10506/blog/rbms/rbm-example.png"><img src="http://dl.dropbox.com/u/10506/blog/rbms/rbm-example.png" alt="RBM Example" /></a></p>

<p>(Note the resemblance to a factor analysis graphical model.)</p>

<h1>State Activation</h1>

<p>Restricted Boltzmann Machines, and neural networks in general, work by updating the states of some neurons given the states of others, so let&#8217;s talk about how the states of individual units change. Assuming we know the connection weights in our RBM (we&#8217;ll explain how to learn these below), to update the state of unit $i$:</p>

<ul>
<li>Compute the <strong>activation energy</strong> $a_i = \sum_j w_{ij} x_j$ of unit $i$, where the sum runs over all units $j$ that unit $i$ is connected to, $w_{ij}$ is the weight of the connection between $i$ and $j$, and $x_j$ is the 0 or 1 state of unit $j$. In other words, all of unit $i$&#8217;s neighbors send it a message, and we compute the sum of all these messages.</li>
<li>Let $p_i = \sigma(a_i)$, where $\sigma(x) = 1/(1 + exp(-x))$ is the logistic function. Note that $p_i$ is close to 1 for large positive activation energies, and $p_i$ is close to 0 for negative activation energies.</li>
<li>We then turn unit $i$ on with probability $p_i$, and turn it off with probability $1 - p_i$.</li>
<li>(In layman&#8217;s terms, units that are positively connected to each other try to get each other to share the same state (i.e., be both on or off), while units that are negatively connected to each other are enemies that prefer to be in different states.)</li>
</ul>


<p>For example, let&#8217;s suppose our two hidden units really do correspond to SF/fantasy and Oscar winners.</p>

<ul>
<li>If Alice has told us her six binary preferences on our set of movies, we could then ask our RBM which of the hidden units her preferences activate (i.e., ask the RBM to explain her preferences in terms of latent factors). So the six movies send messages to the hidden units, telling them to update themselves. (Note that even if Alice has declared she wants to watch Harry Potter, Avatar, and LOTR 3, this doesn&#8217;t guarantee that the SF/fantasy hidden unit will turn on, but only that it will turn on with high <em>probability</em>. This makes a bit of sense: in the real world, Alice wanting to watch all three of those movies makes us highly suspect she likes SF/fantasy in general, but there&#8217;s a small chance she wants to watch them for other reasons. Thus, the RBM allows us to <em>generate</em> models of people in the messy, real world.)</li>
<li>Conversely, if we know that one person likes SF/fantasy (so that the SF/fantasy unit is on), we can then ask the RBM which of the movie units that hidden unit turns on (i.e., ask the RBM to generate a set of movie recommendations). So the hidden units send messages to the movie units, telling them to update their states. (Again, note that the SF/fantasy unit being on doesn&#8217;t guarantee that we&#8217;ll always recommend all three of Harry Potter, Avatar, and LOTR 3 because, hey, not everyone who likes science fiction liked Avatar.)</li>
</ul>


<h1>Learning Weights</h1>

<p>So how do we learn the connection weights in our network? Suppose we have a bunch of training examples, where each training example is a binary vector with six elements corresponding to a user&#8217;s movie preferences. Then for each epoch, do the following:</p>

<ul>
<li>Take a training example (a set of six movie preferences). Set the states of the visible units to these preferences.</li>
<li>Next, update the states of the hidden units using the logistic activation rule described above: for the $j$th hidden unit, compute its activation energy $a_j = \sum_i w_{ij} x_i$, and set $x_j$ to 1 with probability $\sigma(a_j)$ and to 0 with probability $1 - \sigma(a_j)$. Then for each edge $e_{ij}$, compute $Positive(e_{ij}) = x_i * x_j$ (i.e., for each pair of units, measure whether they&#8217;re both on).</li>
<li>Now <strong>reconstruct</strong> the visible units in a similar manner: for each visible unit, compute its activation energy $a_i$, and update its state. (Note that this <em>reconstruction</em> may not match the original preferences.) Then update the hidden units again, and compute $Negative(e_{ij}) = x_i * x_j$ for each edge.</li>
<li>Update the weight of each edge $e_{ij}$ by setting $w_{ij} = w_{ij} + L * (Positive(e_{ij}) - Negative(e_{ij}))$, where $L$ is a learning rate.</li>
<li>Repeat over all training examples.</li>
</ul>


<p>Continue until the network converges (i.e., the error between the training examples and their reconstructions falls below some threshold) or we reach some maximum number of epochs.</p>

<p>Why does this update rule make sense? Note that</p>

<ul>
<li>In the first phase, $Positive(e_{ij})$ measures the association between the $i$th and $j$th unit that we <em>want</em> the network to learn from our training examples;</li>
<li>In the &#8220;reconstruction&#8221; phase, where the RBM generates the states of visible units based on its hypotheses about the hidden units alone, $Negative(e_{ij})$ measures the association that the network <em>itself</em> generates (or &#8220;daydreams&#8221; about) when no units are fixed to training data.</li>
</ul>


<p>So by adding $Positive(e_{ij}) - Negative(e_{ij})$ to each edge weight, we&#8217;re helping the network&#8217;s daydreams better match the reality of our training examples.</p>

<p>(You may hear this update rule called <strong>contrastive divergence</strong>, which is basically a funky term for &#8220;approximate gradient descent&#8221;.)</p>

<h1>Examples</h1>

<p>I wrote <a href="https://github.com/echen/restricted-boltzmann-machines">a simple RBM implementation</a> in Python (the code is heavily commented, so take a look if you&#8217;re still a little fuzzy on how everything works), so let&#8217;s use it to walk through some examples.</p>

<p>First, I trained the RBM using some fake data.</p>

<ul>
<li>Alice: (Harry Potter = 1, Avatar = 1, LOTR 3 = 1, Gladiator = 0, Titanic = 0, Glitter = 0). Big SF/fantasy fan.</li>
<li>Bob: (Harry Potter = 1, Avatar = 0, LOTR 3 = 1, Gladiator = 0, Titanic = 0, Glitter = 0). SF/fantasy fan, but doesn&#8217;t like Avatar.</li>
<li>Carol: (Harry Potter = 1, Avatar = 1, LOTR 3 = 1, Gladiator = 0, Titanic = 0, Glitter = 0). Big SF/fantasy fan.</li>
<li>David: (Harry Potter = 0, Avatar = 0, LOTR 3 = 1, Gladiator = 1, Titanic = 1, Glitter = 0). Big Oscar winners fan.</li>
<li>Eric:  (Harry Potter = 0, Avatar = 0, LOTR 3 = 1, Gladiator = 1, Titanic = 1, Glitter = 0). Oscar winners fan, except for Titanic.</li>
<li>Fred: (Harry Potter = 0, Avatar = 0, LOTR 3 = 1, Gladiator = 1, Titanic = 1, Glitter = 0). Big Oscar winners fan.</li>
</ul>


<p>The network learned the following weights:</p>

<pre><code>                 Bias Unit       Hidden 1        Hidden 2
Bias Unit       -0.08257658     -0.19041546      1.57007782 
Harry Potter    -0.82602559     -7.08986885      4.96606654 
Avatar          -1.84023877     -5.18354129      2.27197472 
LOTR 3           3.92321075      2.51720193      4.11061383 
Gladiator        0.10316995      6.74833901     -4.00505343 
Titanic         -0.97646029      3.25474524     -5.59606865 
Glitter         -4.44685751     -2.81563804     -2.91540988
</code></pre>

<p>Note that the first hidden unit seems to correspond to the Oscar winners, and the second hidden unit seems to correspond to the SF/fantasy movies, just as we were hoping.</p>

<p>What happens if we give the RBM a new user, George, who has (Harry Potter = 0, Avatar = 0, LOTR 3 = 0, Gladiator = 1, Titanic = 1, Glitter = 0) as his preferences? It turns the Oscar winners unit on (but not the SF/fantasy unit), correctly guessing that George probably likes movies that are Oscar winners.</p>

<p>What happens if we activate only the SF/fantasy unit, and run the RBM a bunch of different times? In my trials, it turned on Harry Potter, Avatar, and LOTR 3 three times; it turned on Avatar and LOTR 3, but not Harry Potter, once; and it turned on Harry Potter and LOTR 3, but not Avatar, twice. Note that, based on our training examples, these generated preferences do indeed match what we might expect real SF/fantasy fans want to watch.</p>

<h1>Modifications</h1>

<p>I tried to keep the connection-learning algorithm I described above pretty simple, so here are some modifications that often appear in practice:</p>

<ul>
<li>Above, $Negative(e_{ij})$ was determined by taking the product of the $i$th and $j$th units after reconstructing the visible units <em>once</em> and then updating the hidden units again. We could also take the product after some larger number of reconstructions (i.e., repeat updating the visible units, then the hidden units, then the visible units again, and so on); this is slower, but describes the network&#8217;s daydreams more accurately.</li>
<li>Instead of using $Positive(e_{ij})=x_i * x_j$, where $x_i$ and $x_j$ are binary 0 or 1 <em>states</em>, we could also let $x_i$ and/or $x_j$ be activation <em>probabilities</em>. Similarly for $Negative(e_{ij})$.</li>
<li>We could penalize larger edge weights, in order to get a sparser or more regularized model.</li>
<li>When updating edge weights, we could use a momentum factor: we would add to each edge a weighted sum of the current step as described above (i.e., $L * (Positive(e_{ij}) - Negative(e_{ij})$) and the step previously taken.</li>
<li>Instead of using only one training example in each epoch, we could use <em>batches</em> of examples in each epoch, and only update the network&#8217;s weights after passing through all the examples in the batch. This can speed up the learning by taking advantage of fast matrix-multiplication algorithms.</li>
</ul>


<h1>Further</h1>

<p>If you&#8217;re interested in learning more about Restricted Boltzmann Machines, here are some good links.</p>

<ul>
<li><a href="http://www.cs.toronto.edu/~hinton/absps/guideTR.pdf">A Practical guide to training restricted Boltzmann machines</a>, by Geoffrey Hinton.</li>
<li>A talk by Andrew Ng on <a href="http://www.youtube.com/watch?v=ZmNOAtZIgIk">Unsupervised Feature Learning and Deep Learning</a>.</li>
<li><a href="http://www.machinelearning.org/proceedings/icml2007/papers/407.pdf">Restricted Boltzmann Machines for Collaborative Filtering</a>. I found this paper hard to read, but it&#8217;s an interesting application to the Netflix Prize.</li>
<li><a href="http://arxiv.org/abs/0908.4425">Geometry of the Restricted Boltzmann Machine</a>. A very readable introduction to RBMs, &#8220;starting with the observation that its Zariski closure is a Hadamard power of the first secant variety of the Segre variety of projective lines&#8221;. (I kid, I kid.)</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Visualizing Miss USA 2011: Should Evolution be Taught in Schools?]]></title>
    <link href="http://echen.github.com/blog/2011/07/09/visualizing-miss-usa-2011-should-evolution-be-taught-in-schools/"/>
    <updated>2011-07-09T13:02:05-07:00</updated>
    <id>http://echen.github.com/blog/2011/07/09/visualizing-miss-usa-2011-should-evolution-be-taught-in-schools</id>
    <content type="html"><![CDATA[<p><strong>tl;dr</strong> Should evolution be taught in schools? Go <a href="http://miss-usa-evolution.heroku.com">here</a> to visualize what the Miss USA contestants think.</p>

<h1>The Visualization</h1>

<p>Education is an area sorely in need of data crunching, so when I ran across <a href="http://www.youtube.com/watch?v=9QBv2CFTSWU&amp;feature=player_embedded#at=56">an amusing video</a> satirizing the Miss USA contestants&#8217; thoughts on teaching evolution, I thought it would be fun to transcribe <a href="youtube=http://www.youtube.com/watch?v=UkBmhM0R2A0&amp;feature=youtu.be#at=41">the original video</a> and visualize the data.</p>

<p>So after some tedious transcription, I built <a href="http://miss-usa-evolution.heroku.com">this app</a> to categorize and visualize the responses in various ways. (Mouseover states to see transcriptions, and click to jump to each contestant&#8217;s response in the video.)</p>

<h1>Example Maps</h1>

<p>Here are some examples of the generated maps.</p>

<p>First, we can look at which contestants believe in evolution (Miss California &#8211; the winner! &#8211; is the only contestant who explicitly states she believes in evolution; the red states explicitly state they do not believe in evolution; the grey states don&#8217;t make clear what they believe):</p>

<p><a href="http://miss-usa-evolution.heroku.com/?column=believes"><img src="http://dl.dropbox.com/u/10506/blog/miss-usa-evolution/believe-evolution.png" alt="Believe Evolution" /></a></p>

<p>We can also see which contestants believe evolution should be taught in schools (green states say yes, red states say no, grey states say maybe or that it should be a choice):</p>

<p><a href="http://miss-usa-evolution.heroku.com/?column=should_teach"><img src="http://dl.dropbox.com/u/10506/blog/miss-usa-evolution/teach-evolution.png" alt="Teach Evolution" /></a></p>

<p>Here is a rough Darwin-friendliness score I assigned to each response (worst in dark red to best in dark green):</p>

<p><a href="http://miss-usa-evolution.heroku.com/?column=score"><img src="http://dl.dropbox.com/u/10506/blog/miss-usa-evolution/score.png" alt="Score" /></a></p>

<p>This map shows which contestants believe schools should teach creationism:</p>

<p><a href="http://miss-usa-evolution.heroku.com/?column=teach_creationism"><img src="http://dl.dropbox.com/u/10506/blog/miss-usa-evolution/teach-creationism.png" alt="Teach Creationism" /></a></p>

<p>And this map shows which contestants mention science in their response:</p>

<p><a href="http://miss-usa-evolution.heroku.com/?column=mentions_science"><img src="http://dl.dropbox.com/u/10506/blog/miss-usa-evolution/mention-science.png" alt="Mention Science" /></a></p>

<p>So while there aren&#8217;t any striking patterns (I was hoping for a bright swath of red across the most religious states), the data&#8217;s still fun to look at, and it&#8217;s helpful to see that Alabama, whose <a href="http://www.youtube.com/watch?v=UkBmhM0R2A0&amp;feature=youtu.be#at=42">strongly anti-evolution</a> candidate is the only one colored red in both of the first two maps, does seem to be a bit of an outlier with respect to the rest of the nation.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Topic Modeling the Sarah Palin Emails]]></title>
    <link href="http://echen.github.com/blog/2011/06/27/topic-modeling-the-sarah-palin-emails/"/>
    <updated>2011-06-27T17:19:42-07:00</updated>
    <id>http://echen.github.com/blog/2011/06/27/topic-modeling-the-sarah-palin-emails</id>
    <content type="html"><![CDATA[<h1>LDA-based Email Browser</h1>

<p>Earlier this month, several thousand emails from Sarah Palin&#8217;s time as governor of Alaska were <a href="http://sunlightlabs.com/blog/2011/sarahs-inbox/">released</a>. The emails weren&#8217;t organized in any fashion, though, so to make them easier to browse, I&#8217;ve been working on some topic modeling (in particular, using latent Dirichlet allocation) to separate the documents into different groups.</p>

<p>I threw up <a href="http://sarah-palin.heroku.com/">a simple demo app</a> to view the organized documents <a href="http://sarah-palin.heroku.com/">here</a>.</p>

<h1>What is Latent Dirichlet Allocation?</h1>

<p>Briefly, given a set of documents, LDA tries to learn the latent topics underlying the set. It represents each document as a mixture of topics (generated from a Dirichlet distribution), each of which emits words with a certain probability.</p>

<p>For example, given the sentence &#8220;I listened to Justin Bieber and Lady Gaga on the radio while driving around in my car&#8221;, an LDA model might represent this sentence as 75% about music (a topic which, say, emits the words <em>Bieber</em> with 10% probability, <em>Gaga</em> with 5% probability, <em>radio</em> with 1% probability, and so on) and 25% about cars (which might emit <em>driving</em> with 15% probability and <em>cars</em> with 10% probability).</p>

<p>If you&#8217;re familiar with latent semantic analysis, you can think of LDA as a generative version. (For a more in-depth explanation, I wrote an introduction to LDA <a href="http://blog.echen.me/2011/08/22/introduction-to-latent-dirichlet-allocation/">here</a>.)</p>

<h1>Sarah Palin Email Topics</h1>

<p>Here&#8217;s a sample of the topics learnt by the model, as well as the top words for each topic. (Names, of course, are based on my own interpretation.)</p>

<ul>
<li><a href="http://sarah-palin.heroku.com/topics/24"><strong>Wildlife/BP Corrosion</strong></a>: game, fish, moose, wildlife, hunting, bears, polar, bear, subsistence, management, area, board, hunt, wolves, control, department, year, use, wolf, habitat, hunters, caribou, program, denby, fishing, …</li>
<li><a href="http://sarah-palin.heroku.com/topics/0"><strong>Energy/Fuel/Oil/Mining</strong></a>: energy, fuel, costs, oil, alaskans, prices, cost, nome, now, high, being, home, public, power, mine, crisis, price, resource, need, community, fairbanks, rebate, use, mining, villages, …</li>
<li><a href="http://sarah-palin.heroku.com/topics/19"><strong>Trig/Family/Inspiration</strong></a>: family, web, mail, god, son, from, congratulations, children, life, child, down, trig, baby, birth, love, you, syndrome, very, special, bless, old, husband, years, thank, best, …</li>
<li><a href="http://sarah-palin.heroku.com/topics/6"><strong>Gas</strong></a>: gas, oil, pipeline, agia, project, natural, north, producers, companies, tax, company, energy, development, slope, production, resources, line, gasline, transcanada, said, billion, plan, administration, million, industry, …</li>
<li><a href="http://sarah-palin.heroku.com/topics/12"><strong>Education/Waste</strong></a>: school, waste, education, students, schools, million, read, email, market, policy, student, year, high, news, states, program, first, report, business, management, bulletin, information, reports, 2008, quarter, …</li>
<li><a href="http://sarah-palin.heroku.com/topics/15"><strong>Presidential Campaign/Elections</strong></a>: mail, web, from, thank, you, box, mccain, sarah, very, good, great, john, hope, president, sincerely, wasilla, work, keep, make, add, family, republican, support, doing, p.o, …</li>
</ul>


<p>Here&#8217;s a sample email from the wildlife topic:</p>

<p><a href="http://sarah-palin.heroku.com/emails/6719"><img src="http://dl.dropbox.com/u/10506/blog/palin-browser/wildlife-email.png" alt="Wildlife Email" /></a></p>

<p>I also thought the classification for <a href="http://sarah-palin.heroku.com/emails/12900">this email</a> was really neat: the LDA model labeled it as 10% in the <a href="http://sarah-palin.heroku.com/topics/15">Presidential Campaign/Elections</a> topic and 90% in the <a href="http://sarah-palin.heroku.com/topics/24">Wildlife</a> topic, and it&#8217;s precisely a wildlife-based protest against Palin as a choice for VP:</p>

<p><a href="http://sarah-palin.heroku.com/emails/12900"><img src="http://dl.dropbox.com/u/10506/blog/palin-browser/wildlife-vp.png" alt="Wildlife-VP Protest" /></a></p>

<h1>Future Analysis</h1>

<p>In a future post, I&#8217;ll perhaps see if we can glean any interesting patterns from the email topics. For example, for a quick graph now, if we look at the percentage of emails in the <a href="http://sarah-palin.heroku.com/topics/19">Trig/Family/Inspiration topic</a> across time, we see that there&#8217;s a spike in April 2008 &#8211; exactly (and unsurprisingly) the month in which Trig was born.</p>

<p><a href="http://dl.dropbox.com/u/10506/blog/palin-browser/trig-topic.png"><img src="http://dl.dropbox.com/u/10506/blog/palin-browser/trig-topic.png" alt="Trig" /></a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Spork: Spoon or Fork?]]></title>
    <link href="http://echen.github.com/blog/2011/06/14/spork-spoon-or-fork/"/>
    <updated>2011-06-14T23:32:04-07:00</updated>
    <id>http://echen.github.com/blog/2011/06/14/spork-spoon-or-fork</id>
    <content type="html"><![CDATA[<p>There&#8217;s <a href="http://www.youtube.com/watch?v=ruJ76-o5lxU">an adorable scene</a> in <em>WALL-E</em> where, unable to decide whether a spork belongs with his spoon collection or fork collection, WALL-E enters an infinite loop and spontaneously combusts*.</p>

<p><a href="http://dl.dropbox.com/u/10506/blog/spork/spork-indecision-2.gif"><img src="http://dl.dropbox.com/u/10506/blog/spork/spork-indecision-2.gif" alt="Spork" /></a></p>

<p>This led me to the following timeless question: is a spork more spoon or fork?</p>

<p>To answer, I did a little digging. First, I pulled images of spoons and forks from <a href="http://www.bing.com/images">Bing</a> (natch) and used these to train a spoon-vs.-fork SVM (using the excellent <a href="http://scikit-learn.sourceforge.net/">scikit-learn</a> package).</p>

<p>Using leave-one-out cross-validation, the classifier showed roughly 85% accuracy: 4 out of 20 spoons were misclassified as forks, and 2 out of 20 forks were misclassified as spoons. Not bad, considering the limited dataset and lack of tuning.</p>

<p>Finally, I applied the classifier to my spork images.</p>

<p>The results? 2 out of 20 sporks were classified as forks and the remaining 18 were classified as spoons, thereby definitively proving that <strong>a spork is 10% fork and 90% spoon</strong>.</p>

<p><a href="http://dl.dropbox.com/u/10506/blog/spork/spork-decomposition.png"><img src="http://dl.dropbox.com/u/10506/blog/spork/spork-decomposition.png" alt="Spork Decomposition" /></a></p>

<p>*Not really.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TWSS: Building a That's What She Said Classifier]]></title>
    <link href="http://echen.github.com/blog/2011/05/05/twss-building-a-thats-what-she-said-classifier/"/>
    <updated>2011-05-05T00:09:17-07:00</updated>
    <id>http://echen.github.com/blog/2011/05/05/twss-building-a-thats-what-she-said-classifier</id>
    <content type="html"><![CDATA[<p>There&#8217;s been a <a href="www.cs.washington.edu/homes/brun/pubs/pubs/Kiddon11.pdf">fun paper</a> on <a href="http://www.urbandictionary.com/define.php?term=that's%20what%20she%20said">That&#8217;s What She Said</a> identification making the rounds recently, so I spent some time over the weekend building my own classifier.</p>

<p><strong>tl;dr</strong> A simple unigram Naive Bayes model works pretty well, with performance on the lines of 0.969 precision and 0.823 recall. There&#8217;s a demo <a href="http://twss-classifier.heroku.com/">here</a>. I also ran the classifier over some fairy tale text.</p>

<h1>Naive Bayes Classifier</h1>

<p>To start, I used a super simple Naive Bayes classifier, trained on unigrams (with add-one smoothing). (See the appendix at the end for details.)</p>

<h2>Unigram vs. Bigram Model</h2>

<p>Here are the most predictive features, after training a Naive Bayes model with unigrams:</p>

<pre><code>unigram         p(twss|unigram)
pull            0.9724889822144924
bigger          0.9614677503890157
wet             0.959004244327654
hard            0.9527628206878138
stick           0.9505783678914388
hole            0.9443870318715991
oh              0.9432941279908561
replied         0.943294127990856
fast            0.943294127990856
longer          0.9397415371025485
</code></pre>

<p>Just to compare, here are some of the most predictive features in a bigram model (I added START and END tokens to the beginning and end of each sentence, in order to have some contextual features):</p>

<pre><code>bigram          p(twss|bigram)
it in           0.9801434151851175
START wow       0.9705079286853889
START oh        0.9473580156961879
its too         0.9350522640444204
pull out        0.9187779331523677
too big         0.9187779331523677
START man       0.9113755525471394
hard END        0.9113755525471394
put it          0.9071442285463515
that thing      0.9024886021363793
stick it        0.9024886021363793
my god          0.9024886021363793
go in           0.8916207044791409
START ugh       0.8916207044791409
make it         0.8916207044791409
its so          0.8916207044791409
</code></pre>

<p>Amusingly, sentences starting with <em>wow</em>, <em>oh</em>, and <em>ugh</em>, tend to be good candidates for TWSS sentences, as well as sentences containing <em>it&#8217;s too</em> and <em>it&#8217;s so</em>.</p>

<p>Here&#8217;s a precision-recall curve comparing the two models. We see that, on our datasets, a unigram classifier handily beats a bigram classifier:</p>

<p><a href="http://dl.dropbox.com/u/10506/blog/twss/precision-recall.png"><img src="http://dl.dropbox.com/u/10506/blog/twss/precision-recall.png" alt="Precision-Recall" /></a></p>

<h1>Darling it&#8217;s better</h1>

<p>Although our classifier gives excellent performance on our test set, one question is how well it generalizes to other sources of data.</p>

<p>I didn&#8217;t have another set of positive examples to draw from, but I took a set of fairy tales on Project Gutenberg to form a new batch of negative examples. On this new set of fairy tale sentences, the classifier misclassified only 81 out of 912 of the examples (assuming they should all be classified as &#8220;not TWSS&#8221;), which is a pretty low error rate of 8.89%.</p>

<p>What do these misclassifications look like? Here are some of the false positives it made:</p>

<h2>Aladdin</h2>

<ul>
<li>&#8220;The African magician carries it carefully wrapt up in his bosom,&#8221; said the princess; &#8220;and this I can assure you, because he pulled it out before me, and showed it to me in triumph.&#8221;</li>
<li>It is vanished; but I had no concern in its removal.</li>
<li>&#8220;My son,&#8221; said he, &#8220;what a man you are to do such surprising things always in the twinkling of an eye!&#8221;</li>
<li>&#8220;Sire,&#8221; replied Aladdin, &#8220;I have not the least reason to complain of your conduct, since you did nothing but what your duty required.&#8221;</li>
<li>&#8220;With your leave, mother,&#8221; replied Aladdin, &#8220;I shall now take care how I sell a lamp which may be so serviceable both to you and me.&#8221;</li>
</ul>


<p><a href="http://dl.dropbox.com/u/10506/blog/twss/aladdin.png"><img src="http://dl.dropbox.com/u/10506/blog/twss/aladdin.png" alt="http://dl.dropbox.com/u/10506/blog/twss/aladdin.png" /></a></p>

<h2>Hansel and Gretel</h2>

<ul>
<li>&#8220;Oh dear,&#8221; he said, &#8220;do let me go and see the hunt; I cannot restrain myself.&#8221;</li>
<li>When they awoke it was dark night, and poor Grethel began to cry, and said, &#8220;Oh, how shall we get out of the wood?&#8221; But Hansel comforted her.</li>
<li>&#8220;But remember,&#8221; she said, &#8220;I must lock the cottage door against those huntsmen, so when you come back in the evening, and knock, I shall not admit you, unless you say, &#8216;Dear little sister let me in.&#8217;</li>
</ul>


<h2>Snow White</h2>

<ul>
<li>One was too long, another too short; so she tried them all till she came to the seventh, and that was so comfortable that she laid herself down, and was soon fast asleep.</li>
<li>&#8220;Oh yes, I will try,&#8221; said Snow-white.</li>
</ul>


<p>Note that a lot of these really are TWSS sentences! (Now we know where <a href="http://www.snopes.com/disney/films/mermaid.asp">those Disney artists</a> got their inspiration.) So the classifier appears to generalize surprisingly well.</p>

<h1>A Demo</h1>

<p>I created <a href="http://twss-classifier.heroku.com/">a small Sinatra app</a> to play around with the classifier, and deployed it <a href="http://twss-classifier.heroku.com/">here</a>. I also put the code <a href="https://github.com/echen/twss-classifier">on Github</a>.</p>

<h1>Appendix: Details</h1>

<h2>Datasets</h2>

<p>To grab some TWSS examples, my first thought was to turn to <a href="http://search.twitter.com/search?q=twss">twitter</a>. However, the twitter data turned out to be incredibly noisy (lots of junk obscuring not terribly funny examples), so taking a cue from the K&amp;B paper, I pulled data from three sources:</p>

<ul>
<li>First, I scraped <a href="http://twssstories.com">twss stories</a> for positive training data (sentences for which a TWSS response is appropriate). Since only the last part in quotes from each submission is truly relevant to being a TWSS, I kept the quote and threw away the rest of each submission.</li>
<li>Next, I scraped <a href="http://textsfromlastnight.com">Texts from Last Night</a> and <a href="http://www.fmylife.com">FMyLife</a> for negative training data. Since TWSS jokes are usually made in response to <em>sentences</em> (the last sentence you say), I split each submission into sentences, and each sentence formed a single negative training example.</li>
</ul>


<p>Finally, I normalized each sentence by converting to lowercase and removing any punctuation.</p>

<h2>The Algorithm</h2>

<p>To train and test the classifier, I used the examples I gathered to form training and test sets, each consisting of:</p>

<ul>
<li>1000 positive examples from twss stories.</li>
<li>500 negative examples from Texts from Last Night.</li>
<li>500 negative examples from FMyLife.</li>
</ul>


<h2>Performance of the Unigram Model</h2>

<p>Since we want to optimize for precision (we hope the things we classify as TWSS sentences really are TWSS sentences) over recall (it&#8217;s fine if we don&#8217;t always respond TWSS to every TWSS sentence), let&#8217;s use 0.99 probability as our threshold for classifying a sentence as TWSS. (This is equivalent to setting a low prior for the probability of being a TWSS.)</p>

<p>With this threshold, a unigram Naive Bayes classifier has the following performance on a test set:</p>

<ul>
<li>True positives: 823</li>
<li>False negatives: 177</li>
<li>True negatives: 974</li>
<li>False positives: 26</li>
<li>Precision = 0.969</li>
<li>Recall = 0.823</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Filtering for English Tweets: Unsupervised Language Detection on Twitter]]></title>
    <link href="http://echen.github.com/blog/2011/05/01/unsupervised-language-detection-algorithms/"/>
    <updated>2011-05-01T16:28:07-07:00</updated>
    <id>http://echen.github.com/blog/2011/05/01/unsupervised-language-detection-algorithms</id>
    <content type="html"><![CDATA[<p>(See a demo <a href="http://babel-fett.heroku.com/">here</a>.)</p>

<p>While working on a Twitter sentiment analysis project, I ran into the problem of needing to filter out all non-English tweets. (Asking the Twitter API for English-only tweets doesn&#8217;t seem to work, as it nonetheless returns tweets in Spanish, Portuguese, Dutch, Russian, and a couple other languages.)</p>

<p>Since I didn&#8217;t have any labeled data, I thought it would be fun to build an <strong>unsupervised</strong> language classifier. In particular, using an EM algorithm to build a naive Bayes model of English vs. non-English n-gram probabilities turned out to work quite well, so here&#8217;s a description.</p>

<h1>EM Algorithm</h1>

<p>Let&#8217;s recall the naive Bayes algorithm: given a tweet (a set of <em>character</em> n-grams), we estimate its language to be the language $L$ that maximizes</p>

<p>$$P(language = L | ngrams) \propto P(ngrams | language = L) P(language = L)$$</p>

<p>Thus, we need to estimate $P(ngram | language = L)$ and $P(language = L)$.</p>

<p>This would be easy <strong>if we knew the language of each tweet</strong>, since we could estimate</p>

<ul>
<li>$P(xyz| language = English)$ as #(number of times &#8220;xyz&#8221; is a trigram in the English tweets) / #(total trigrams in the English tweets)</li>
<li>$P(language = English)$ as the proportion of English tweets.</li>
</ul>


<p>Or, it would also be easy <strong>if we knew the n-gram probabilities for each language</strong>, since we could use Bayes&#8217; theorem to compute the language <em>probabilities</em> for each tweet, and then take a weighted variant of the previous paragraph.</p>

<p><strong>The problem is that we know neither of these.</strong> So what the EM algorithm says is that that we can simply <strong>guess</strong>:</p>

<ul>
<li>Pretend we know the language of each tweet (by randomly assigning them at the beginning).</li>
<li>Using this guess, we can compute the n-gram probabilities for each language.</li>
<li>Using the n-gram probabilities for each language, we can recompute the language probabilities of each tweet.</li>
<li>Using these recomputed language probabilities, we can recompute the n-gram probabilities.</li>
<li>And so on, recomputing the language probabilities and n-gram probabilities over and over. While our guesses will be off in the beginning, the probabilities will eventually converge to (locally) minimize the likelihood. (In my tests, my language detector would sometimes correctly converge to an English detector, and sometimes it would converge to an English-and-Dutch detector.)</li>
</ul>


<h2>EM Analogy for the Layman</h2>

<p>Why does this work? Suppose you suddenly move to New York, and you want a way to differentiate between tourists and New Yorkers based on their activities. Initially, you don&#8217;t know who&#8217;s a tourist and who&#8217;s a New Yorker, and you don&#8217;t know which are touristy activities and which are not. So you randomly place people into two groups A and B. (You randomly assign all tweets to a language)</p>

<p>Now, given all the people in group A, you notice that a large number of them visit the Statue of Liberty; similarly, you notice that a large number of people in group B walk really quickly. (You notice that one set of words often has the n-gram &#8220;ing&#8221;, and that another set of words often has the n-gram &#8220;ias&#8221;; that is, you fix the language probabilities for each tweet, and recompute the n-gram probabilities for each language.)</p>

<p>So you start to put people visiting the Statue of Liberty in group A, and you start to put fast walkers in group B. (You fix the n-gram probabilities for each language, and recompute the language probabilities for each tweet.)</p>

<p>With your new A and B groups, you notice more differentiating factors: group A people tend to carry along cameras, and group B people tend to be more finance-savvy.</p>

<p>So you start to put camera-carrying folks in group A, and finance-savvy folks in group B.</p>

<p>And so on. Eventually, you settle on two groups of people and differentiating activities: people who walk slowly and visit the Statue of Liberty, and busy-looking people who walk fast and don&#8217;t visit. Assuming there are more native New Yorkers than tourists, you can then guess that the natives are the larger group.</p>

<h1>Results</h1>

<p>I wrote some Ruby code to implement the above algorithm, and trained it on half a million tweets, using English and &#8220;not English&#8221; as my two languages. The results looked surprisingly good from just eyeballing:</p>

<p><a href="https://img.skitch.com/20110303-qfrnb8gstgheh4xech4iutfskd.jpg"><img src="https://img.skitch.com/20110303-qfrnb8gstgheh4xech4iutfskd.jpg" alt="Example Results" /></a></p>

<p>But in order to get some hard metrics and to tune parameters (e.g., n-gram size), I needed a labeled dataset. So I pulled a set of English-language and Spanish-language documents from Project Gutenberg, and split them to form training and test sets (the training set consisted of 2000 lines of English and 1000 lines of Spanish, and  1000 lines of English and 1000 lines of Spanish for the test set).</p>

<p>Trained on bigrams, the detector resulted in:</p>

<ul>
<li>991 true positives (English lines correctly classified as English)</li>
<li>9 false negatives (English lines incorrectly classified as Spanish</li>
<li>11 false positives (Spanish lines incorrectly classified as English)</li>
<li>989 true negatives (Spanish lines correctly classified as English)</li>
</ul>


<p>for a precision of 0.989 and a recall of 0.991.</p>

<p>Trained on trigrams, the detector resulted in:</p>

<ul>
<li>992 true positives</li>
<li>8 false negatives</li>
<li>10 false positives</li>
<li>990 true negatives</li>
</ul>


<p>for a precision of 0.990 and a recall of 0.992.</p>

<p>Also, when I looked at the sentences the detector was making errors on, I saw that they almost always consisted of only one or two words (e.g., the incorrectly classified sentences were lines like &#8220;inmortal&#8221;, &#8220;autumn&#8221;, and &#8220;salir&#8221;). So the detector pretty much never made a mistake on a normal sentence!</p>

<h1>Code/Demo</h1>

<p>I put the code on <a href="https://github.com/echen/unsupervised-language-identification">my Github account</a>, and a quick <a href="http://babel-fett.heroku.com/">demo app</a>, trained on trigrams from tweets with lang=&#8221;en&#8221; according to the Twitter API, is <a href="http://babel-fett.heroku.com/">here</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Eigensheep]]></title>
    <link href="http://echen.github.com/blog/2011/05/01/eigensheep/"/>
    <updated>2011-05-01T15:23:31-07:00</updated>
    <id>http://echen.github.com/blog/2011/05/01/eigensheep</id>
    <content type="html"><![CDATA[<p>Aaron Koblin&#8217;s <a href="http://www.thesheepmarket.com/">Sheep Market</a> visualization is an awesome use of Mechanical Turk. But it&#8217;d be even more awesome if the grid were <em>ordered</em>, so I decided to try projecting the sheep onto two dimensions.</p>

<h1>Principal Sheep Components</h1>

<p>After screenshotting the first 50 sheep from the market and normalizing their size and color, here&#8217;s what a PCA projection looks like (<a href="http://dl.dropbox.com/u/10506/eigensheep.png">click</a> for a larger view):</p>

<p><a href="http://dl.dropbox.com/u/10506/eigensheep.png"><img src="http://dl.dropbox.com/u/10506/eigensheep.png" alt="Projected Sheep" /></a></p>

<p>Notice how the stroke widths get thicker as we move to the right (i.e., <strong>the first principal component seems to measure the blackness of the sheep</strong>), and the amount of wool on the sheep&#8217;s body increases as we move up (i.e., <strong>the second principal component seems to measure the wooliness of the sheep</strong>).</p>

<p>It&#8217;s also pretty neat how all the sheep with black heads and black legs (sheep 35, 16, 32, 31, and 19) get clumped together:</p>

<p><a href="http://dl.dropbox.com/u/10506/eigensheep-black-heads.png"><img src="http://dl.dropbox.com/u/10506/eigensheep-black-heads.png" alt="Projected Sheep, Black Heads/Legs Circled" /></a></p>

<p>And I think the sheep on the left (next to and inside the dense cluster) seem much more poorly drawn &#8211; they look more like camels, dogs, unicorns, or bugs than actual sheep.</p>

<h1>Code</h1>

<p>In a bit more detail, I used the poor man&#8217;s Mechanical Turk (myself) to screenshot the first 50 sheep from the market, trying to hug the sheep as closely as possible to ensure proper alignment. Next, I used the <a href="http://www.pythonware.com/products/pil/">Python Imaging Library</a> to resize the images to 150x150px, convert them to grayscale, and flatten them into the rows of a matrix.</p>

<p>In case anyone else wants to play with the sheep images, I put the <a href="https://github.com/echen/eigensheep">code</a> on my <a href="https://github.com/echen/eigensheep">Github</a> account.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Choosing a Machine Learning Classifier]]></title>
    <link href="http://echen.github.com/blog/2011/04/27/choosing-a-machine-learning-classifier/"/>
    <updated>2011-04-27T18:43:15-07:00</updated>
    <id>http://echen.github.com/blog/2011/04/27/choosing-a-machine-learning-classifier</id>
    <content type="html"><![CDATA[<p>How do you know what machine learning algorithm to choose for your classification problem? Of course, if you really care about accuracy, your best bet is to test out a couple different ones (making sure to try different parameters within each algorithm as well), and select the best one by cross-validation. But if you&#8217;re simply looking for a &#8220;good enough&#8221; algorithm for your problem, or a place to start, here are some general guidelines I&#8217;ve found to work well over the years.</p>

<h1>How large is your training set?</h1>

<p>If your training set is small, high bias/low variance classifiers (e.g., Naive Bayes) have an advantage over low bias/high variance classifiers (e.g., kNN), since the latter will overfit. But low bias/high variance classifiers start to win out as your training set grows (they have lower asymptotic error), since high bias classifiers aren&#8217;t powerful enough to provide accurate models.</p>

<p>You can also think of this as a generative model vs. discriminative model distinction.</p>

<h1>Advantages of some particular algorithms</h1>

<p><strong>Advantages of Naive Bayes:</strong> Super simple, you&#8217;re just doing a bunch of counts. If the NB conditional independence assumption actually holds, a Naive Bayes classifier will converge quicker than discriminative models like logistic regression, so you need less training data. And even if the NB assumption doesn&#8217;t hold, a NB classifier still often does a great job in practice. A good bet if  want something fast and easy that performs pretty well. Its main disadvantage is that it can&#8217;t learn interactions between features (e.g., it can&#8217;t learn that although you love movies with Brad Pitt and Tom Cruise, you hate movies where they&#8217;re together).</p>

<p><strong>Advantages of Logistic Regression:</strong> Lots of ways to regularize your model, and you don&#8217;t have to worry as much about your features being correlated, like you do in Naive Bayes. You also have a nice probabilistic interpretation, unlike decision trees or SVMs, and you can easily update your model to take in new data (using an online gradient descent method), again unlike decision trees or SVMs. Use it if you want a probabilistic framework (e.g., to easily adjust classification thresholds, to say when you&#8217;re unsure, or to get confidence intervals) or if you expect to receive more training data in the future that you want to be able to quickly incorporate into your model.</p>

<p><strong>Advantages of Decision Trees:</strong> Easy to interpret and explain (for some people &#8211; I&#8217;m not sure I fall into this camp). They easily handle feature interactions and they&#8217;re non-parametric, so you don&#8217;t have to worry about outliers or whether the data is linearly separable (e.g., decision trees easily take care of cases where you have class A at the low end of some feature x, class B in the mid-range of feature x, and A again at the high end). One disadvantage is that they don&#8217;t support online learning, so you have to rebuild your tree when new examples come on. Another disadvantage is that they easily overfit, but that&#8217;s where ensemble methods like random forests (or boosted trees) come in. Plus, random forests are often the winner for lots of problems in classification (usually slightly ahead of SVMs, I believe), they&#8217;re fast and scalable, and you don&#8217;t have to worry about tuning a bunch of parameters like you do with SVMs, so they seem to be quite popular these days.</p>

<p><strong>Advantages of SVMs:</strong> High accuracy, nice theoretical guarantees regarding overfitting, and with an appropriate kernel they can work well even if you&#8217;re data isn&#8217;t linearly separable in the base feature space. Especially popular in text classification problems where very high-dimensional spaces are the norm. Memory-intensive, hard to interpret, and kind of annoying to run and tune, though, so I think random forests are starting to steal the crown.</p>

<h1>But&#8230;</h1>

<p>Recall, though, that better data often beats better algorithms, and designing good features goes a long way. And if you have a huge dataset, then whichever classification algorithm you use might not matter so much in terms of classification performance (so choose your algorithm based on speed or ease of use instead).</p>

<p>And to reiterate what I said above, if you really care about accuracy, you should definitely try a bunch of different classifiers and select the best one by cross-validation. Or, to take a lesson from the Netflix Prize (and Middle Earth), just use an ensemble method to choose them all.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Kickstarter Data Analysis: Success and Pricing]]></title>
    <link href="http://echen.github.com/blog/2011/04/25/kickstarter-data-analysis-success-and-pricing/"/>
    <updated>2011-04-25T21:19:40-07:00</updated>
    <id>http://echen.github.com/blog/2011/04/25/kickstarter-data-analysis-success-and-pricing</id>
    <content type="html"><![CDATA[<p><a href="http://www.kickstarter.com/">Kickstarter</a> is an online crowdfunding platform for launching creative projects. When starting a new project, project owners specify a deadline and the minimum amount of money they need to raise. They receive the money (less a transaction fee) only if they reach or exceed that minimum; otherwise, no money changes hands.</p>

<p>What&#8217;s particularly fun about Kickstarter is that in contrast to <a href="http://www.kiva.org/">that other microfinance site</a>, Kickstarter projects don&#8217;t ask for loans; instead, patrons receive pre-specified rewards unique to each project. For example, someone donating money to help an artist record an album might receive a digital copy of the album if they donate 20 dollars, or a digital copy plus a signed physical cd if they donate 50 dollars.</p>

<p>There are <a href="http://www.kickstarter.com/discover/hall-of-fame?ref=sidebar">a bunch</a> of <a href="http://www.kickstarter.com/projects/1104350651/tiktok-lunatik-multi-touch-watch-kits">neat</a> <a href="http://www.kickstarter.com/projects/2024077040/neil-gaimans-the-price">projects</a>, and I&#8217;m tempted to put one of my own on there soon, so I thought it would be fun to gather some data from the site and see what makes a project successful.</p>

<h1>Categories</h1>

<p>I started by scraping the categories section.</p>

<p><a href="http://dl.dropbox.com/u/10506/blog/kickstarter/successful-projects-by-category.png"><img src="http://dl.dropbox.com/u/10506/blog/kickstarter/successful-projects-by-category.png" alt="Successful projects by category" /></a></p>

<p>In true indie fashion, the artsy categories tend to dominate. (I&#8217;m surprised/disappointed how little love the Technology category gets.)</p>

<h1>Ending Soon</h1>

<p>The categories section really only provides a history of <em>successful</em> projects, though, so to get some data on unsuccessful projects as well, I took a look at the <a href="http://www.kickstarter.com/discover/ending-soon?ref=sidebar">Ending Soon</a> section of projects whose deadlines are about to pass.</p>

<p>It looks like about 50% of all Kickstarter projects get successfully funded by the deadline:</p>

<p><a href="http://dl.dropbox.com/u/10506/blog/kickstarter/ending-soon-success.png"><img src="http://dl.dropbox.com/u/10506/blog/kickstarter/ending-soon-success.png" alt="Successful projects as deadline approaches" /></a></p>

<p>Interestingly, most of the final funding seems to happen in the final few days: with just 5 days left, only about 20% of all projects have been funded. (In other words, with just 5 days left, 60% of the projects that will eventually be successful are still unfunded.) So the approaching deadline seems to really spur people to donate. I wonder if it&#8217;s because of increased publicity in the final few days (the project owners begging everyone for help!) or if it&#8217;s simply procrastination in action (perhaps people want to wait to see if their donation is really necessary)?</p>

<p>Lesson: if you&#8217;re still not fully funded with only a couple days remaining, don&#8217;t despair.</p>

<h1>Success vs. Failure</h1>

<p>What factors lead a project to succeed? Are there any quantitative differences between projects that eventually get funded and those that don&#8217;t?</p>

<p>Two simple (if kind of obvious) things I noticed are that unsuccessful projects tend to require a larger amount of money:</p>

<p><a href="http://dl.dropbox.com/u/10506/blog/kickstarter/successful-vs-unsuccessful-goal.png"><img src="http://dl.dropbox.com/u/10506/blog/kickstarter/successful-vs-unsuccessful-goal.png" alt="Unsuccessful projects tend to ask for more money" /></a></p>

<p>and unsuccessful projects also tend to raise less money in absolute terms (i.e., it&#8217;s not just that they ask for too much money to reach their goal &#8211; they&#8217;re simply not receiving enough money as well):</p>

<p><a href="http://dl.dropbox.com/u/10506/blog/kickstarter/successful-vs-unsuccessful-amount-pledged.png"><img src="http://dl.dropbox.com/u/10506/blog/kickstarter/successful-vs-unsuccessful-amount-pledged.png" alt="Unsuccessful projects received less money" /></a></p>

<p>Not terribly surprising, but it&#8217;s good to confirm (and I&#8217;m still working on finding other predictors).</p>

<h1>Pledge Rewards</h1>

<p>There&#8217;s a lot of interesting work in behavioral economics on pricing and choice &#8211; for example, the <a href="http://youarenotsosmart.com/2010/07/27/anchoring-effect/">anchoring effect</a> suggests that when building a menu, you should <a href="http://www.neurosciencemarketing.com/blog/articles/neuro-menus-and-restaurant-psychology.htm">include an expensive item</a> to make other menu items look reasonably priced in comparison, and the <a href="http://en.wikipedia.org/wiki/The_Paradox_of_Choice:_Why_More_Is_Less">paradox of choice </a> suggests that too many choices lead to a decision freeze &#8211; so one aspect of the Kickstarter data I was especially interested in was how pricing of rewards affects donations. For example, does pricing the lowest reward at 25 dollars lead to more money donated (people don&#8217;t lowball at 5 dollars instead) or less money donated (25 dollars is more money than most people are willing to give)? And what happens if a new reward at 5 dollars is added &#8211; again, does it lead to more money (now people can donate something they can afford) or less money (the people that would have paid 25 dollars switch to a 5 dollar donation)?</p>

<p>First, here&#8217;s a look at the total number of pledges at each price. (More accurately, it&#8217;s the number of claimed rewards at each price.) [Update: the original version of this graph was wrong, but I&#8217;ve since fixed it.]</p>

<p><a href="http://dl.dropbox.com/u/10506/blog/kickstarter/pledge%20amounts.png"><img src="http://dl.dropbox.com/u/10506/blog/kickstarter/pledge%20amounts.png" alt="Pledge Amounts" /></a></p>

<p>Surprisingly, 5 dollar and 1 dollar donations are actually not the most common contribution.</p>

<p>To investigate pricing effects, I started by looking at all (successful) projects that had a reward priced at 1 dollar, and compared the number of donations at 1 dollar with the number of donations at the next lowest reward.</p>

<p>Up to about 15-20 dollars, there&#8217;s a steady increase in the proportion of people who choose the second reward over the first reward, but after that, the proportion decreases.</p>

<p><a href="http://dl.dropbox.com/u/10506/blog/kickstarter/anchoring.png"><img src="http://dl.dropbox.com/u/10506/blog/kickstarter/anchoring.png" alt="Anchoring" /></a></p>

<p><a href="http://dl.dropbox.com/u/10506/blog/kickstarter/anchoring-abline-b.png"><img src="http://dl.dropbox.com/u/10506/blog/kickstarter/anchoring-abline-b.png" alt="Anchoring with Regression Lines" /></a></p>

<p>So this perhaps suggests that if you&#8217;re going to price your lowest reward at 1 dollar, your next reward should cost roughly 20 dollars (or slightly more, to maximize your total revenue). Pricing above 20 dollars is a little too expensive for the folks who want to support you, but aren&#8217;t rich enough to throw gads of money; maybe rewards below 20 dollars aren&#8217;t good enough to merit the higher donation.</p>

<p>Next, I&#8217;m planning on digging a little deeper into pricing effects and what makes a project successful, so I&#8217;ll hopefully have some more Kickstarter analysis in a future post. In the meantime, in case anyone else wants to take a look, I put the data onto <a href="https://github.com/echen/kickstarter-data-analysis">my Github account</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Mathematical Introduction to Least Angle Regression]]></title>
    <link href="http://echen.github.com/blog/2011/04/21/a-mathematical-introduction-to-least-angle-regression/"/>
    <updated>2011-04-21T00:16:36-07:00</updated>
    <id>http://echen.github.com/blog/2011/04/21/a-mathematical-introduction-to-least-angle-regression</id>
    <content type="html"><![CDATA[<p>(I wrote up a more mathematical explanation of least angle regression <a href="http://echen.me/posts/a-mathematical-introduction-to-least-angle-regression">here</a>.)</p>

<p>Suppose you&#8217;re at a buffet. You don&#8217;t want to just grab everything and overeat (overfit), so how do you decide which dishes to take? Here are some possibilities.</p>

<h1>Forward Selection</h1>

<p>On your first trip to the buffet, take a plateful of your favorite dish, bring it back, and eat it. On your second trip, take a plateful of the dish that <em>now</em> looks most appetizing, bring it back, and eat it. And so on.</p>

<p>The problem with this method is the following: suppose your favorite food is spaghetti, followed closely by macaroni. Ideally, you&#8217;d like to take half a plate of spaghetti and slightly less than half a plate of macaroni, but under this method, you have to first take and eat a plateful of spaghetti, and now you&#8217;re sick of pasta and don&#8217;t want macaroni anymore.</p>

<h1>Forward Stagewise</h1>

<p>To remedy the greediness of the above method, another option is to take smaller morsels at a time. On your first trip to the buffet, you take a thimbleful of your favorite dish; on your next trip to the buffet, you take a thimbleful of the currently most appetizing dish; and so on again.</p>

<p>Now, after getting your thimbleful of spaghetti, pasta still looks delicious to you, so you can get your thimbleful of macaroni as well.</p>

<p>The problem with this method is that because you&#8217;re only eating a thimbleful at a time, you have to make many trips to the buffet and so dinner takes forever.</p>

<h1>Least Angle Regression</h1>

<p>A much more efficient method works as follows. Suppose your favorite dishes are, in order, spaghetti, macaroni, salad, and chili. On your first trip, you grab a bunch of spaghetti. You know that as you eat spaghetti, you start to get slightly sick of it, so it becomes less and less appetizing, until eventually it becomes just as appetizing as macaroni (but still more appetizing than salad and chili). So only grab an amount X of spaghetti, so that after eating X, spaghetti and macaroni are equally appetizing.</p>

<p>On your second trip, spaghetti and macaroni are equally appetizing. Grab both spaghetti and macaroni, in proportions such that spaghetti and macaroni stay equally appetizing while you eat. Again, you know exactly how much spaghetti and macaroni you can eat until salad becomes just as appetizing, so only grab this amount.</p>

<p>On your third trip, spaghetti, macaroni, and salad look equally delicious. Again, grab the three foods in proportions that stay equally appetizing while you eat, and only grab enough to make chili look just as tasty.</p>

<p>And so on.</p>

<p>Note that:</p>

<ul>
<li>This method works better than forward selection, because we get to eat both spaghetti and macaroni.</li>
<li>This method works much faster than forward stagewise, because we make much fewer trips. (If we want to eat $n$ dishes, we only need to make $n$ trips.)</li>
<li>We&#8217;re always eating whatever looks most appetizing to us.</li>
</ul>


<h1>Reversing the Analogy</h1>

<p>Replace buffet with linear regression and dishes with variables, and you now have three tasty model selection methods to choose from.</p>

<p>For a more mathematical explanation of least angle regression, see <a href="http://echen.me/posts/a-mathematical-introduction-to-least-angle-regression">here</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Twifferences Between Californians and New Yorkers]]></title>
    <link href="http://echen.github.com/blog/2011/04/18/twifferences-between-californians-and-new-yorkers/"/>
    <updated>2011-04-18T03:41:39-07:00</updated>
    <id>http://echen.github.com/blog/2011/04/18/twifferences-between-californians-and-new-yorkers</id>
    <content type="html"><![CDATA[<p>How do people in Silicon Valley compare to those in New York City? For a data-driven answer, I pulled a couple days&#8217; worth of Twitter data around the two areas.</p>

<h2>Silicon Valley vs. NYC</h2>

<p>So let&#8217;s take a look. To compare the two places, I trained a simple Naive Bayes model on user profiles. Here are the words most predictive of being from Silicon Valley vs. NYC:</p>

<h3>Silicon Valley</h3>

<pre><code>word                    Prob(Silicon Valley | word)
cloud                   0.9053263586466359
stanford                0.8947378473880241
hacker                  0.8759014372329466
dev                     0.8684686297323906
giants                  0.8522440881548609
mac                     0.8453052631578948
support                 0.8453052631578948
ux                      0.8453052631578948
engineer                0.8321693229113796
software                0.8223647630482606
google                  0.8199372672025093
yahoo                   0.8095254553623891
ui                      0.7978356566397651
board                   0.7978356566397651
programmer              0.7978356566397651
health                  0.7946855178965604
game                    0.7846171884159925
bike                    0.7846171884159925
gadgets                 0.7846171884159925
surfer                  0.7846171884159925
lead                    0.7846171884159925
green                   0.7758225129356634
product                 0.7707827422373662
engineering             0.7662790401791395
data                    0.7662790401791395
biz                     0.7522143788498717
games                   0.7503363731499477
cto                     0.7474653744372272
startup                 0.7474653744372272
cofounder               0.745373899785155 
team                    0.7399904460289096
mobile                  0.7395369397321055
entrepreneur            0.7346495409451503
before                  0.7320595099183198
corporate               0.7320595099183198
companies               0.7320595099183198
enterprise              0.7320595099183198
careers                 0.7320595099183197
help                    0.7320595099183197
jobs                    0.7226147417213892
systems                 0.7183120188916491
dude                    0.7183120188916491
solutions               0.7146518581802648
startups                0.7146518581802648
instructor              0.7146518581802648
founder                 0.7136727946906866
advocate                0.7119786767011602
community               0.7107516339869281
local                   0.7083355385022493
cyclist                 0.7083355385022493
formerly                0.7083355385022493
tech                    0.7034995094145681
dad                     0.699465571148113 
developer               0.6933557437157872
evangelist              0.6886440677966102
architect               0.6886440677966102
experience              0.6875894616006009
designer                0.6861009534875773
app                     0.6861009534875773
gamer                   0.6701428216249068
geek                    0.6699839438296025
friend                  0.6692937011181566
married                 0.6692937011181566
past                    0.6670653907496013
yoga                    0.6670653907496013
baseball                0.6670653907496013
iphone                  0.65665476702241  
guy                     0.6396064208138196
running                 0.6323876017254413
</code></pre>

<h3>New York City</h3>

<pre><code>word                    Prob(New York | word)
bbm                     0.9235374771480804
mets                    0.9165294616574365
teamfollowback          0.9165294616574365
nyu                     0.9165294616574365
columbia                0.8848747591522158
actress                 0.8682158330051202
chick                   0.845920058942715 
theatre                 0.8010386109569492
money                   0.7935205183585313
publishing              0.7854119457864808
moment                  0.7854119457864808
self                    0.7854119457864808
ya                      0.7545697268432944
intern                  0.7545697268432944
makeup                  0.7512175173798283
financial               0.7512175173798283
studio                  0.7329822041337483
records                 0.7329822041337483
magazine                0.7272706101537029
history                 0.7249169653720938
fashion                 0.718105290117341 
myself                  0.7118622174381054
soul                    0.7072308553828924
peace                   0.7072308553828924
dancer                  0.7017521519889981
night                   0.687114269683935 
president               0.6871142696839349
event                   0.6577157178660937
dreams                  0.6577157178660937
model                   0.6577157178660937
read                    0.6577157178660937
journalism              0.6577157178660937
filmmaker               0.6530588061027995
news                    0.6466488313151225
mother                  0.6466488313151224
entertainment           0.6466488313151224
party                   0.640842613712599 
political               0.640842613712599 
producer                0.6372663804691904
communications          0.6222197132211811
actor                   0.6169228655604573
journalist              0.616094753936313 
website                 0.6133083363295495
radio                   0.6133083363295495
executive               0.6058707124010555
</code></pre>

<p>Some findings:</p>

<ul>
<li>Silicon Valley is much more <strong>tech</strong>- (<em>cloud, hacker, dev, engineer, software, programmer</em>) and <strong>startup</strong>-driven (<em>startup, entrepreneur, founder</em>). New York is much more into <strong>arts/entertainment</strong> (<em>actress, theatre, publishing, studio, records, magazine, journalism, filmmaker, news</em>) and <strong>finance</strong> (<em>money, financial</em>). (Another way to look at it: Silicon Valley higher-ups call themselves <em>ctos</em> and <em>founders</em> and sit on <em>boards</em>, while New York higher-ups call themselves <em>presidents</em> and <em>executives</em>.)</li>
<li>New Yorkers care a lot about <strong>looks</strong> (<em>makeup, fashion</em>). Silicon Valley folks care a lot about <strong>sports</strong>, <strong>health</strong>, and the <strong>outdoors</strong> (<em>bike, surfer, cyclist, yoga, running, health</em>).</li>
<li>Silicon Valley folks describe themselves through their <strong>past</strong> (<em>before, formerly, past, former</em>). New Yorkers describe themselves through their <strong>future</strong> (<em>dreams</em>).</li>
<li>Silicon Valley is big on <strong>community</strong> (<em>support, team, help, helping, community</em>). New York is focused on the <strong>individual</strong> (<em>self, myself</em>).</li>
<li>Silicon Valley has a larger proportion of <strong>men</strong> (<em>dad, geek, dude, guy</em>). New York has the <strong>women</strong> (<em>mother, chick</em>).</li>
<li>New York uses BlackBerrys (<em>bbm</em> is short for BlackBerry Messenger), while Silicon Valley uses <em>iPhones</em>.</li>
<li>Silicon Valley is more into the <strong>locavore</strong> movement (<em>green, local</em>).</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introduction to Cointegration and Pairs Trading]]></title>
    <link href="http://echen.github.com/blog/2011/04/16/what-is-cointegration-2/"/>
    <updated>2011-04-16T03:44:14-07:00</updated>
    <id>http://echen.github.com/blog/2011/04/16/what-is-cointegration-2</id>
    <content type="html"><![CDATA[<h1>Introduction</h1>

<p>Suppose you see two drunks (i.e., two random walks) wandering around. The drunks don&#8217;t know each other (they&#8217;re independent), so there&#8217;s no meaningful relationship between their paths.</p>

<p>But suppose instead you have a drunk walking with her dog. This time there <em>is</em> a connection. What&#8217;s the nature of this connection? Notice that although each path individually is still an unpredictable random walk, given the location of one of the drunk or dog, we have a pretty good idea of where the other is; that is, the distance between the two is fairly predictable. (For example, if the dog wanders too far away from his owner, she&#8217;ll tend to move in his direction to avoid losing him, so the two stay close together despite a tendency to wander around on their own.) We describe this relationship by saying that the drunk and her dog form a cointegrating pair.</p>

<p>In more technical terms, if we have two non-stationary time series X and Y that become stationary when differenced (these are called integrated of order one series, or I(1) series; random walks are one example) such that some linear combination of X and Y is stationary (aka, I(0)), then we say that X and Y are cointegrated. In other words, while neither X nor Y alone hovers around a constant value, some combination of them does, so we can think of cointegration as describing a particular kind of long-run equilibrium relationship. (The definition of cointegration can be extended to multiple time series, with higher orders of integration.)</p>

<p>Other examples of cointegrated pairs:</p>

<ul>
<li>Income and consumption: as income increases/decreases, so too does consumption.</li>
<li>Size of police force and amount of criminal activity</li>
<li>A book and its movie adaptation: while the book and the movie may differ in small details, the overall plot will remain the same.</li>
<li>Number of patients entering or leaving a hospital</li>
</ul>


<h1>An application</h1>

<p>So why do we care about cointegration? In quantitative finance, cointegration forms the basis of the pairs trading strategy: suppose we have two cointegrated stocks X and Y, with the particular (for concreteness) cointegrating relationship X - 2Y = Z, where Z is a stationary series of zero mean. For example, X could be McDonald&#8217;s, Y could be Burger King, and the cointegration relationship would mean that X tends to be priced twice as high as Y, so that when X is more than twice the price of Y, we expect X to move down or Y to move up in the near future (and analogously, if X is less than twice the price of Y, we expect X to move up or Y to move down). This suggests the following trading strategy: if X - 2Y > d, for some positive threshold d, then we should sell X and buy Y (since we expect X to decrease in price and Y to increase), and similarly, if X - 2Y &lt; -d, then we should buy X and sell Y.</p>

<h1>Spurious regression</h1>

<p>But why do we need the notion of cointegration at all? Why can&#8217;t we simply use, say, the R-squared between X or Y to see if X and Y have some kind of relationship? The reason is that standard regression analysis fails when dealing with non-stationary variables, leading to spurious regressions that suggest relationships even when there are none.</p>

<p>For example, suppose we regress two independent random walks against each other, and test for a linear relationship. A large percentage of the time, we&#8217;ll find high R-squared values and low p-values when using standard OLS statistics, even though there&#8217;s absolutely no relationship between the two random walks. As an illustration, here I simulated 1000 pairs of random walks of length 100, and found p-values less than 0.05 in 77% of the cases:</p>

<p><a href="http://dl.dropbox.com/u/10506/blog/cointegration/spurious-regression.png"><img src="http://dl.dropbox.com/u/10506/blog/cointegration/spurious-regression.png" alt="Spurious Regression" /></a></p>

<h1>A Cointegration Test</h1>

<p>So how do you detect cointegration? There are several different methods, but the simplest is the Engle-Granger test, which works roughly as follows:</p>

<ul>
<li>Check that $ X_t $ and $ Y_t $ are both I(1).</li>
<li>Estimate the cointegrating relationship $ Y_t = aX_t + e_t $ by ordinary least squares.</li>
<li>Check that the cointegrating residuals $ e_t $ are stationary (say, by using a so-called unit root test, e.g., the Dickey-Fuller test).</li>
</ul>


<h1>Error-correction and Granger representation</h1>

<p>Something else that should perhaps be mentioned is the relationship between cointegration and error-correction mechanisms: suppose we have two cointegrated series $ X_t, Y_t $, with autoregressive representations</p>

<p>$ X_t = a X_{t-1} + b Y_{t-1} + u_t $
$ Y_t = c X_{t-1} + d Y_{t-1} + v_t $</p>

<p>By the Granger representation theorem (which is actually a bit more general than this), we then have</p>

<p>$ \Delta X_t = \alpha_1 (Y_{t-1} - \beta X_{t-1}) + u_t $
$ \Delta Y_t = \alpha_2 (Y_{t-1} - \beta X_{t-1}) + v_t $</p>

<p>where $ Y_{t-1} - \beta X_{t-1} \sim I(0) $ is the cointegrating relationship. Regarding $ Y_{t-1} - \beta X_{t-1} $ as the extent of disequilibrium from the long-run relationship, and the $ \alpha_i $ as the speed (and direction) at which the time series correct themselves from this disequilibrium, we can see that this formalizes the way cointegrated variables adjust to match their long-run equilbrium.</p>

<h1>Summary</h1>

<p>So, just to summarize a bit, cointegration is an equilibrium relationship between time series that individually aren&#8217;t in equilbrium (you can kind of contrast this with (Pearson) correlation, which describes a linear relationship), and it&#8217;s useful because it allows us to incorporate both short-term dynamics (deviations from equilibrium) and long-run expectations (corrections to equilibrium).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Harry Potter and the Keyword Chaos: Unsupervised Statistically Significant Phrases]]></title>
    <link href="http://echen.github.com/blog/2011/03/22/harry-potter-and-the-keyword-chaos-unsupervised-statistically-significant-phrases/"/>
    <updated>2011-03-22T04:20:23-07:00</updated>
    <id>http://echen.github.com/blog/2011/03/22/harry-potter-and-the-keyword-chaos-unsupervised-statistically-significant-phrases</id>
    <content type="html"><![CDATA[<p>One of my all-time favorite graphs is the following visualization of the distribution of the primes (showing that the primes are more spread out than the random, clumpy points of a Poisson process):</p>

<p><a href="http://dl.dropbox.com/u/10506/blog/harry-potter-chaos/prime-chaos.png"><img src="http://dl.dropbox.com/u/10506/blog/harry-potter-chaos/prime-chaos.png" alt="Distribution of Primes" /></a></p>

<p>So I was pretty intrigued when I ran across <a href="http://bioinfo2.ugr.es/Publicaciones/PRE09.pdf">this paper</a> (<a href="http://bioinfo2.ugr.es/Publicaciones/PRE09.pdf">Level statistics of words: Finding keywords in literary texts and symbolic sequences</a>) using similar quantumish, random matrixish ideas to extract the important phrases from a text.</p>

<h1>The Paper</h1>

<p>Statistical phrase extraction (e.g., the &#8220;statistically improbable phrases&#8221; you see on Amazon) is usually done by comparing a target text against a baseline corpus. The authors of this paper, however, describe an <em>unsupervised</em> phrase extraction method given only the target text itself, by making use of the spatial distribution of the phrases (which gets thrown out in typical bag-of-word models).</p>

<p>The idea is that uninformative words and phrases (e.g., &#8220;the&#8221; and &#8220;but&#8221;) have a more random and uniform distribution than important words and phrases (e.g., names of main characters), which will tend to form clusters. (Funnily, the quantum chaos paper containing the primes graph reverses these characterizations: there, the primes are the ones that are repellent and spread out, while the random numbers are the ones that form clusters.)</p>

<p>Thus, the cluster-tendency of a phrase should be a reasonable measure of its importance.</p>

<h1>Implementation</h1>

<p>I wrote a quick Ruby script to calculate the level statistics on the first Harry Potter book.</p>

<p>Here are the top 25 unigrams extracted (ordered using the sigma_normalized statistic from the paper; I played around with the paper&#8217;s C number as well, but it didn&#8217;t give as good results):</p>

<pre><code>phrase  count   sigma_normalized
dudley  117     5.886458836973907
vernon  105     5.425462371919648
uncle   121     4.96291028279975
yeh     100     4.483340310689477
mirror  46      4.4123632519944564
platform        20      3.7698278374021283
wood    53      3.698871282864937
aunt    65      3.682665094335877
hagrid  336     3.532997146829891
ter     78      3.4935220547292394
petunia 57      3.3847272743671764
dragon  31      3.319790040957389
fang    16      3.1175440675916763
unicorn 22      3.109138726006347
bludgers        13      3.0336322222301035
o       31      2.973718095050078
malfoy  112     2.965094959118159
voldemort       31      2.957883190702609
percy   36      2.946348443571833
path    12      2.9430416987716383
dursley 54      2.9266934668788025
christmas       25      2.926196222714648
anythin 13      2.8753724174699626
quirrell        91      2.8351538706894868
crate   12      2.8171552951153913
</code></pre>

<p>It looks more impressive when you compare with the bottom 25 unigrams (filtered to counts of at least 50, to make the unigrams more comparable to those above):</p>

<pre><code>phrase  count   sigma_normalized
few     55      0.858973690529759
seemed  72      0.8660034944771483
might   54      0.8691077527153204
after   68      0.8700202208036406
way     94      0.8893865470583092
come    95      0.8897833973429081
before  107     0.9158168210798949
good    82      0.9208260024379561
suddenly        69      0.9223289856683224
only    111     0.9262797404590966
put     58      0.9320218173468643
must    57      0.932224843054271
while   60      0.9367996846919046
asked   60      0.9386801898266576
left    82      0.9509973378264027
trying  65      0.9511509393516154
saw     62      0.9524243012100968
even    105     0.9563651096306485
really  73      0.9569234100328665
voice   59      0.957685122636835
away    71      0.9611639088841413
where   100     0.9657416499349912
every   53      0.9659213894654203
harrys  113     0.9746316711628271
long    71      0.9794359046955133
</code></pre>

<p>Similarly, here are the top bigrams:</p>

<pre><code>phrase  count   sigma_normalized
uncle vernon    97      5.2050164080560615
the mirror      35      3.8911699122647163
professor mcgonagall    89      3.570490871211533
aunt petunia    52      3.3541554249859917
the library     21      3.2822285085324374
nine and        13      3.052813340938423
the twins       12      3.0493973437585256
the potters     12      2.962214857171763
the boy 26      2.86158988074687
said hagrid     89      2.76691520812392
the stone       48      2.7118270594517413
and dudley      15      2.705365860880404
the giant       15      2.682345959043539
the troll       18      2.6613701424473386
mr dursley      30      2.607508647153971
said uncle      13      2.5996349710103055
sorcerers stone 14      2.564840300637567
the quaffle     16      2.533417641354809
said dumbledore 27      2.5200215250194193
said hermione   42      2.509101121058932
and threequarters       9       2.4248478008322967
the crate       9       2.377194502184057
the cloak       22      2.368960931129895
the forest      23      2.3607725433338675
mr potter       12      2.3429313549690285
</code></pre>

<p>And the bottom bigrams (filtered to counts of at least 25):</p>

<pre><code>phrase  count   sigma_normalized
for a   38      0.6706459452115997
the way 34      0.7417616427971635
to harry        31      0.7671160112200728
a few   45      0.7699093885203201
off the 32      0.7949383886682402
to him  27      0.7958792937430593
was going       36      0.811227023007951
up to   39      0.8122786875347693
but it  32      0.8336661901803439
up the  40      0.8365345579027479
if you  34      0.8422559552361845
which was       28      0.8552087965411528
of course       35      0.8621365585531023
by the  43      0.8625237028663237
the other       52      0.8876800348745395
with a  55      0.8903321479589525
 and    51      0.9016112133824481
his face        31      0.9018554880700214
and he  47      0.9038362537361607
with the        56      0.9048625952654603
but i   32      0.9110050643857517
had to  43      0.9235463968235097
at last 28      0.9255524776918606
i know  27      0.9294114876847764
he could        47      0.9358967550241238
</code></pre>

<p>So interestingly, while the method doesn&#8217;t do a great job of capturing the most important phrases (I&#8217;m not really sure why it should, in any case, as I&#8217;d guess main characters and themes would appear pretty evenly throughout the text), it does seem to pick out minor characters and objects (like the Dudleys), which seems to make a bit more sense.</p>
]]></content>
  </entry>
  
</feed>
